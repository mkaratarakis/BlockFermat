
import Mathlib.FieldTheory.KrullTopology
import Mathlib.Analysis.Complex.Polynomial
import Mathlib.NumberTheory.ModularForms.Basic
import Mathlib.NumberTheory.ModularForms.CongruenceSubgroups
import Mathlib.NumberTheory.NumberField.Basic
import Mathlib.NumberTheory.Padics.PadicNumbers
import Mathlib.RingTheory.Valuation.RamificationGroup
import Mathlib.Topology.Algebra.ContinuousMonoidHom

namespace LocalRing

variable {A B: Type _} [CommRing B] [CommRing A] [LocalRing A] [LocalRing B]
  [Algebra A B] [IsLocalRingHom (algebraMap A B)]

/-- A local ring automorphism is local. -/
instance (e : B ‚âÉ+* B) :
    IsLocalRingHom e.toRingHom where
  map_nonunit := by sorry

noncomputable instance generalAlgebraMap :
    Algebra (LocalRing.ResidueField A) (LocalRing.ResidueField B) := sorry

/-- The group homomorphism from the Galois group to the Galois group of residue fields. -/
noncomputable def algebraEquivToResidueEquiv :
    (B ‚âÉ‚Çê[A] B) ‚Üí* LocalRing.ResidueField B ‚âÉ‚Çê[LocalRing.ResidueField A] LocalRing.ResidueField B
    where
  toFun x :=
    { toFun := LocalRing.ResidueField.map x.toRingEquiv.toRingHom
      invFun := LocalRing.ResidueField.map x.symm.toRingEquiv.toRingHom
      left_inv := sorry
      right_inv := sorry
      map_mul' := sorry
      map_add' := sorry
      commutes' := by sorry
       }
  map_one' := sorry
  map_mul' x y := sorry

end LocalRing

namespace ValuationSubring

variable {K L : Type _} [Field K] [Field L]

/-- The map from the pullback of a valuation subring A to A along a ring homomorphism K ‚Üí+* L -/
def RingHom.valuationSubringComap (A : ValuationSubring L) (f : K ‚Üí+* L) : comap A f ‚Üí+* A
    where
  toFun x := ‚ü®f x.1, x.2‚ü©
  map_one' := sorry
  map_mul' x y := sorry
  map_add' x y := sorry
  map_zero' := sorry

section
--
variable (K) [Field K] [Algebra K L]

open scoped Pointwise

/-- The group homomorphism from the decomposition group to the group
 of automorphisms of the residue field of a valuation subring A-/
def decompositionSubgroupToResidueAut (A : ValuationSubring L) :
    A.decompositionSubgroup K ‚Üí* RingAut (LocalRing.ResidueField A) :=
  LocalRing.ResidueField.mapAut.comp (MulSemiringAction.toRingAut (A.decompositionSubgroup K) A)

instance AlgebraComap(A : ValuationSubring L) : Algebra (comap A (algebraMap K L)) A := sorry

/-- The group homomorphism from the decomposition group to the Galois group of
A fixing the pullback of A. -/
def decompositionSubgroup.restrict (A : ValuationSubring L) :
    A.decompositionSubgroup K ‚Üí* A ‚âÉ‚Çê[comap A (algebraMap K L)] A
    where
  toFun x :=
    { MulSemiringAction.toRingAut (A.decompositionSubgroup K) A x with
      commutes' := sorry
    }
  map_one' := by sorry
  map_mul' := by sorry

theorem ComapNeTopOfAlgebraic (v : ValuationSubring L) (h : v ‚â† ‚ä§)
    (ha : Algebra.IsAlgebraic K L) : v.comap (algebraMap K L) ‚â† ‚ä§ := sorry

end

namespace frobenius

variable [Fintype K] [Algebra K L]

variable (K) (L)

def frob : L ‚Üí‚Çê[K] L
 where
  toFun x := x ^ Fintype.card K
  map_one' := sorry
  map_mul' x y := sorry
  map_zero' := sorry
  map_add' x y := sorry
  commutes' x := sorry

variable {K} {L}

theorem frob_bijective (ha : Algebra.IsAlgebraic K L) : Function.Bijective (frob K L) := sorry

noncomputable def equiv (ha : Algebra.IsAlgebraic K L) : L ‚âÉ‚Çê[K] L :=
  AlgEquiv.ofBijective (frob K L) (frob_bijective ha)

end frobenius

open scoped NumberField

variable [NumberField K] [Algebra K L] [IsGalois K L] (K)

/-- The natural reduction homomorphism from the decomposition group
  to the Galois group of the residue field of A
  fixing the residue field of the pullback of A -/
noncomputable def decompositionSubgroup.toResidueFieldEquiv (A : ValuationSubring L) :
    decompositionSubgroup K A ‚Üí*
      LocalRing.ResidueField A ‚âÉ‚Çê[LocalRing.ResidueField (comap A (algebraMap K L))]
        LocalRing.ResidueField A := LocalRing.algebraEquivToResidueEquiv.comp (decompositionSubgroup.restrict K A)

/-- The natural reduction homomorphism is surjective. -/
theorem decompositionSubgroup.surjective (v : ValuationSubring L) :
    Function.Surjective (decompositionSubgroup.toResidueFieldEquiv K v) := sorry

/-- If the inertia subgroup is trivial, the natural reduction homomorphism is bijective. -/
theorem decompositionSubgroup.bijective (v : ValuationSubring L) (h : inertiaSubgroup K v = ‚ä•) :
    Function.Bijective (decompositionSubgroup.toResidueFieldEquiv K v) := sorry

theorem algebraComapAlgebraic (B : ValuationSubring L) :
    Algebra.IsAlgebraic (LocalRing.ResidueField (B.comap (algebraMap K L)))
      (LocalRing.ResidueField B) := sorry

variable [NumberField L]

theorem subset_of_val_subring (B : ValuationSubring L) : (ùìû L).toSubring ‚â§ B.toSubring :=
  sorry

/-- The map (ùìû L) ‚Üí+* local_ring.residue_field B -/
def RingOfIntToRes (B : ValuationSubring L) : ùìû L ‚Üí+* LocalRing.ResidueField B :=
  (LocalRing.residue B).comp (Subring.inclusion (subset_of_val_subring B))

/-- The map (ùìû L) ‚Üí+* local_ring.residue_field B is surjective-/
theorem RingOfIntToResSurj (B : ValuationSubring L) (htop : B ‚â† ‚ä§) :
  Function.Surjective (RingOfIntToRes B) := sorry

/-- The isomorphism  (ùìû L) ‚ß∏ (ring_of_int_to_res B).ker
   ‚âÉ+* local_ring.residue_field B -/
noncomputable def resFieldEquiv (B : ValuationSubring L) (htop : B ‚â† ‚ä§) :
    ùìû L ‚ß∏ RingHom.ker (RingOfIntToRes B) ‚âÉ+* LocalRing.ResidueField B :=
  RingHom.quotientKerEquivOfSurjective (RingOfIntToResSurj B htop)

theorem fintypeOfNeBot (B : ValuationSubring K) (htop : B ‚â† ‚ä§) :
    Fintype (LocalRing.ResidueField B) := sorry

/-- The Frobenius element as an element of the decomposition group defined
 as a random pre-image. -/
noncomputable def Frob (K L : Type _) [Field K] [Field L] [NumberField K] [Algebra K L]
    [IsGalois K L] (v : ValuationSubring L) (hv : v ‚â† ‚ä§) : decompositionSubgroup K v :=
  by
  letI :=
    fintypeOfNeBot K (v.comap (algebraMap K L))
      (ComapNeTopOfAlgebraic K v hv Normal.isAlgebraic')
  have := decompositionSubgroup.surjective K v
  let f :
    LocalRing.ResidueField v ‚âÉ‚Çê[LocalRing.ResidueField (v.comap (algebraMap K L))]
      LocalRing.ResidueField v := frobenius.equiv (algebraComapAlgebraic K v)
  specialize this f
  exact this.choose

end ValuationSubring


variable (k : Type _) [CommRing k] [TopologicalSpace k] [TopologicalRing k]

/-- `galois_rep k` is the type of 2-dimensional Galois representations where `k` is a
topological ring defined as the continuous monoid homomorphism of the absolute Galois group
of the rationals to the `GL_2 k`-/
def GaloisRep :=
  ContinuousMonoidHom (AlgebraicClosure ‚Ñö ‚âÉ‚Çê[‚Ñö] AlgebraicClosure ‚Ñö) (GL (Fin 2) k)

variable {k}

open ValuationSubring

/-- `is_unramified œÅ q` if the inertia subgroup is contained in its kernel -/
noncomputable def IsUnramified (œÅ : GaloisRep k) (q : ValuationSubring (AlgebraicClosure ‚Ñö)) : Prop :=
  inertiaSubgroup ‚Ñö q ‚â§ œÅ.toMonoidHom.ker.subgroupOf (decompositionSubgroup ‚Ñö q)

open scoped BigOperators

open Polynomial Nat AlgebraicClosure

variable {K L : Type _} [Field K] [Field L] {p : ‚Ñï} [Fact (Nat.Prime p)] [Algebra K L]

/-- A Dirichlet character is defined as a monoid homomorphism which is periodic. -/
abbrev DirChar (R : Type _) [Monoid R] (n : ‚Ñï) := Units (ZMod n) ‚Üí* Units R

/-- The map from the algebraic closure for K to L when L is algebraically closed -/
noncomputable def functoriality (_ : IsAlgClosed L) : AlgebraicClosure K ‚Üí+* L :=
  AlgHom.toRingHom (IsAlgClosed.lift (isAlgebraic K))

/-- An arbitrary fixed map from the algebraic closure of ‚Ñö into ‚ÑÇ -/
noncomputable def algClosRatToComplex : AlgebraicClosure ‚Ñö ‚Üí+* ‚ÑÇ :=
  functoriality Complex.isAlgClosed

/-- An arbitrary fixed map from algebraic closure of ‚Ñö into alg closure of ‚Ñö_p. -/
noncomputable def algClosRatToPAdic (p : ‚Ñï) [Fact (Nat.Prime p)] :
    AlgebraicClosure ‚Ñö ‚Üí+* AlgebraicClosure ‚Ñö_[p] :=
    functoriality (isAlgClosed ‚Ñö_[p])

def ZMod.Unit.mk {N : ‚Ñï} {q : ‚Ñï} (h : Nat.Prime q) (hqN : ¬¨q ‚à£ N) : (ZMod N)À£
    where
  val := q
  inv := q‚Åª¬π
  val_inv := sorry
  inv_val := by sorry

/-- The Hecke operator -/
noncomputable def heckeOperator {N : ‚Ñï} {k : ‚Ñï} {q : ‚Ñï} (f : ModularForm (Gamma1 N) k)
    (h : Nat.Prime q) (œá : DirChar ‚ÑÇ N) (hqN : ¬¨q ‚à£ N) (z : UpperHalfPlane) : ‚ÑÇ :=
  ‚àë n in Finset.range q,
      f
        ‚ü®(z + n) / q,
          sorry
          ‚ü© +
      œá (ZMod.Unit.mk h hqN) * q ^ (k - 1) * f
        ‚ü®q * z, sorry‚ü©

/-- Only asking that it is an eigenvector for the good primes. -/
def IsWeakEigenform {N : ‚Ñï} {k : ‚Ñï} (f : ModularForm (Gamma1 N) k) (œá : DirChar ‚ÑÇ N) :
    Prop :=
  f ‚â† 0 ‚àß
    ‚àÄ {q : ‚Ñï} (h : Nat.Prime q) (hqN : ¬¨q ‚à£ N),
      ‚àÉ a : ‚ÑÇ, ‚àÄ z : UpperHalfPlane, heckeOperator f h œá hqN z = a * f z

/-- An eigenvalue of the Hecke operator. -/
noncomputable def eigenvalue {N : ‚Ñï} {k : ‚Ñï} {q : ‚Ñï} (h : Nat.Prime q)
    {f : ModularForm (Gamma1 N) k} (hqN : ¬¨q ‚à£ N) {œá : DirChar ‚ÑÇ N}
    (hf : IsWeakEigenform f œá) : ‚ÑÇ :=
  Exists.choose (hf.2 h hqN)

/--The eigenvalues of the Hecke operator are algebraic. -/
theorem EigenvaluesAlgebraic {N : ‚Ñï} {k : ‚Ñï} {q : ‚Ñï} (h : Nat.Prime q)
    {f : ModularForm (Gamma1 N) k} (hqN : ¬¨q ‚à£ N) {œá : DirChar ‚ÑÇ N}
    (hf : IsWeakEigenform f œá) :
    ‚àÉ a : AlgebraicClosure ‚Ñö, algClosRatToComplex a = eigenvalue h hqN hf := sorry

/-- The algebraic eigenvalue of the Hecke operator -/
noncomputable def AlgEigenvalue {N : ‚Ñï} {k : ‚Ñï} {q : ‚Ñï} (h : Nat.Prime q)
    {f : ModularForm (Gamma1 N) k} {œá : DirChar ‚ÑÇ N} (hf : IsWeakEigenform f œá)
    (hqN : ¬¨q ‚à£ N) : AlgebraicClosure ‚Ñö :=
  Exists.choose (EigenvaluesAlgebraic h hqN hf)

theorem NonnunitPrimesInComap (v : ValuationSubring (AlgebraicClosure ‚Ñö)) (h : v ‚â† ‚ä§) :
    ‚àÉ q : ‚Ñï, Nat.Prime q ‚àß ‚Üëq ‚àà LocalRing.maximalIdeal (v.comap (algebraMap ‚Ñö (AlgebraicClosure ‚Ñö))) :=
  sorry

noncomputable def q (v : ValuationSubring (AlgebraicClosure ‚Ñö)) (h : v ‚â† ‚ä§) : ‚Ñï :=
  Exists.choose (NonnunitPrimesInComap v h)

theorem q.isPrime {v : ValuationSubring (AlgebraicClosure ‚Ñö)} (h : v ‚â† ‚ä§) :
    Nat.Prime (q v h) := sorry

def ZMod.Unit {N : ‚Ñï} {q : ‚Ñï} (h : Nat.Prime q) (hqN : ¬¨q ‚à£ p * N) : (ZMod N)À£
    where
  val := q
  inv := q‚Åª¬π
  val_inv := sorry
  inv_val := sorry

theorem div (N : ‚Ñï) (v : ValuationSubring (AlgebraicClosure ‚Ñö)) (h : v ‚â† ‚ä§)
    (hqpN : ¬¨q v h ‚à£ p * N) : ¬¨q v h ‚à£ N := sorry

section

variable (R : Type _) [CommRing R] [TopologicalSpace R] [TopologicalRing R] [NumberField K]
  [Algebra K L] [IsGalois K L]

open ValuationSubring

variable {R}

instance AlgebraicClosureNormedField : NormedField (AlgebraicClosure ‚Ñö_[p]) :=sorry

/-- Units (ZMod n) ‚Üí* Units ‚ÑÇ -/
noncomputable def DirCharComplex {N : ‚Ñï} (œá : DirChar (AlgebraicClosure ‚Ñö) N) :
    DirChar ‚ÑÇ N := (Units.map algClosRatToComplex.toMonoidHom).comp œá

/-- Units (ZMod n) ‚Üí* Units ‚Ñö_[p] -/
noncomputable def DirCharAlgClosRat {N : ‚Ñï} {p : ‚Ñï} [Fact (Nat.Prime p)]
    (œá : DirChar (AlgebraicClosure ‚Ñö) N) :
    DirChar (AlgebraicClosure ‚Ñö_[p]) N :=
  (Units.map (algClosRatToPAdic p).toMonoidHom).comp œá

instance : IsGalois ‚Ñö (AlgebraicClosure ‚Ñö) := sorry

theorem Deligne {N : ‚Ñï} {k : ‚Ñï} {f : ModularForm (Gamma1 N) k} (œá : DirChar (AlgebraicClosure ‚Ñö) N)
   (hf : IsWeakEigenform f (DirCharComplex œá)) :
    ‚àÉ (œÅ : GaloisRep (AlgebraicClosure ‚Ñö_[p])),
      ‚àÄ (v : ValuationSubring (AlgebraicClosure ‚Ñö)) (hv : v ‚â† ‚ä§) (hqpN : ¬¨ q v hv ‚à£ p * N), (IsUnramified œÅ v)
    ‚àß let a := C ((algClosRatToPAdic p) (AlgEigenvalue (q.isPrime hv) hf (div N v hv hqpN)))
    let œáq  := (Units.coeHom (AlgebraicClosure ‚Ñö_[p])).comp (DirCharAlgClosRat œá) (ZMod.Unit (q.isPrime hv) hqpN)
Matrix.charpoly (Matrix.of (œÅ.toMonoidHom (Frob ‚Ñö (AlgebraicClosure ‚Ñö) v hv))) =
X ^ 2 - (a * X) + ((q v hv) ^ (k - 1) : (AlgebraicClosure ‚Ñö_[p])[X]) * (C œáq) := sorry

end

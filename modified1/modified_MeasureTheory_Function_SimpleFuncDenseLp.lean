def simpleFunc : AddSubgroup (Lp E p Œº) where
  carrier := { f : Lp E p Œº | ‚àÉ s : Œ± ‚Üí‚Çõ E, (AEEqFun.mk s s.aestronglyMeasurable : Œ± ‚Üí‚Çò[Œº] E) = f }
  zero_mem' := ‚ü®0, rfl‚ü©
  add_mem' := by
    rintro f g ‚ü®s, hs‚ü© ‚ü®t, ht‚ü©
    use s + t
    simp only [‚Üê hs, ‚Üê ht, AEEqFun.mk_add_mk, AddSubgroup.coe_add, AEEqFun.mk_eq_mk,
      SimpleFunc.coe_add]
  neg_mem' := by
    rintro f ‚ü®s, hs‚ü©
    use -s
    simp only [‚Üê hs, AEEqFun.neg_mk, SimpleFunc.coe_neg, AEEqFun.mk_eq_mk, AddSubgroup.coe_neg]
#align measure_theory.Lp.simple_func MeasureTheory.Lp.simpleFunc

def smul : SMul ùïú (Lp.simpleFunc E p Œº) :=
  ‚ü®fun k f =>
    ‚ü®k ‚Ä¢ (f : Lp E p Œº), by
      rcases f with ‚ü®f, ‚ü®s, hs‚ü©‚ü©
      use k ‚Ä¢ s
      apply Eq.trans (AEEqFun.smul_mk k s s.aestronglyMeasurable).symm _
      rw [hs]
      rfl‚ü©‚ü©
#align measure_theory.Lp.simple_func.has_smul MeasureTheory.Lp.simpleFunc.smul

def module : Module ùïú (Lp.simpleFunc E p Œº) where
  one_smul f := by ext1; exact one_smul _ _
  mul_smul x y f := by ext1; exact mul_smul _ _ _
  smul_add x f g := by ext1; exact smul_add _ _ _
  smul_zero x := by ext1; exact smul_zero _
  add_smul x y f := by ext1; exact add_smul _ _ _
  zero_smul f := by ext1; exact zero_smul _ _
#align measure_theory.Lp.simple_func.module MeasureTheory.Lp.simpleFunc.module

def normedSpace {ùïú} [NormedField ùïú] [NormedSpace ùïú E] [Fact (1 ‚â§ p)] :
    NormedSpace ùïú (Lp.simpleFunc E p Œº) :=
  ‚ü®norm_smul_le (Œ± := ùïú) (Œ≤ := Lp.simpleFunc E p Œº)‚ü©
#align measure_theory.Lp.simple_func.normed_space MeasureTheory.Lp.simpleFunc.normedSpace

def toLp (f : Œ± ‚Üí‚Çõ E) (hf : Mem‚Ñíp f p Œº) : Lp.simpleFunc E p Œº :=
  ‚ü®hf.toLp f, ‚ü®f, rfl‚ü©‚ü©
#align measure_theory.Lp.simple_func.to_Lp MeasureTheory.Lp.simpleFunc.toLp

def toSimpleFunc (f : Lp.simpleFunc E p Œº) : Œ± ‚Üí‚Çõ E :=
  Classical.choose f.2
#align measure_theory.Lp.simple_func.to_simple_func MeasureTheory.Lp.simpleFunc.toSimpleFunc

def indicatorConst {s : Set Œ±} (hs : MeasurableSet s) (hŒºs : Œº s ‚â† ‚àû) (c : E) :
    Lp.simpleFunc E p Œº :=
  toLp ((SimpleFunc.const _ c).piecewise s hs (SimpleFunc.const _ 0))
    (mem‚Ñíp_indicator_const p hs c (Or.inr hŒºs))
#align measure_theory.Lp.simple_func.indicator_const MeasureTheory.Lp.simpleFunc.indicatorConst

def coeToLp : Lp.simpleFunc E p Œº ‚ÜíL[ùïú] Lp E p Œº :=
  { AddSubgroup.subtype (Lp.simpleFunc E p Œº) with
    map_smul' := fun _ _ => rfl
    cont := Lp.simpleFunc.uniformContinuous.continuous }
#align measure_theory.Lp.simple_func.coe_to_Lp MeasureTheory.Lp.simpleFunc.coeToLp

def coeSimpleFuncNonnegToLpNonneg :
    { g : Lp.simpleFunc G p Œº // 0 ‚â§ g } ‚Üí { g : Lp G p Œº // 0 ‚â§ g } := fun g => ‚ü®g, g.2‚ü©
#align measure_theory.Lp.simple_func.coe_simple_func_nonneg_to_Lp_nonneg MeasureTheory.Lp.simpleFunc.coeSimpleFuncNonnegToLpNonneg

structure on `Lp.simpleFunc E p Œº`, would be
unnecessary.  But instead, `Lp.simpleFunc E p Œº` is defined as an `AddSubgroup` of `Lp E p Œº`,
which does not permit this (but has the advantage of working when `E` itself is a normed group,
i.e. has no scalar action). -/


variable [NormedRing ùïú] [Module ùïú E] [BoundedSMul ùïú E]

/-- If `E` is a normed space, `Lp.simpleFunc E p Œº` is a `SMul`. Not declared as an
instance as it is (as of writing) used only in the construction of the Bochner integral. -/
protected def smul : SMul ùïú (Lp.simpleFunc E p Œº) :=
  ‚ü®fun k f =>
    ‚ü®k ‚Ä¢ (f : Lp E p Œº), by
      rcases f with ‚ü®f, ‚ü®s, hs‚ü©‚ü©
      use k ‚Ä¢ s
      apply Eq.trans (AEEqFun.smul_mk k s s.aestronglyMeasurable).symm _
      rw [hs]
      rfl‚ü©‚ü©
#align measure_theory.Lp.simple_func.has_smul MeasureTheory.Lp.simpleFunc.smul
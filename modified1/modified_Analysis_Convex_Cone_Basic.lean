def map (f : E ‚Üí‚Çó[ùïú] F) (S : ConvexCone ùïú E) : ConvexCone ùïú F where
  carrier := f '' S
  smul_mem' := fun c hc _ ‚ü®x, hx, hy‚ü© => hy ‚ñ∏ f.map_smul c x ‚ñ∏ mem_image_of_mem f (S.smul_mem hc hx)
  add_mem' := fun _ ‚ü®x‚ÇÅ, hx‚ÇÅ, hy‚ÇÅ‚ü© _ ‚ü®x‚ÇÇ, hx‚ÇÇ, hy‚ÇÇ‚ü© =>
    hy‚ÇÅ ‚ñ∏ hy‚ÇÇ ‚ñ∏ f.map_add x‚ÇÅ x‚ÇÇ ‚ñ∏ mem_image_of_mem f (S.add_mem hx‚ÇÅ hx‚ÇÇ)
#align convex_cone.map ConvexCone.map

def comap (f : E ‚Üí‚Çó[ùïú] F) (S : ConvexCone ùïú F) : ConvexCone ùïú E where
  carrier := f ‚Åª¬π' S
  smul_mem' c hc x hx := by
    rw [mem_preimage, f.map_smul c]
    exact S.smul_mem hc hx
  add_mem' x hx y hy := by
    rw [mem_preimage, f.map_add]
    exact S.add_mem hx hy
#align convex_cone.comap ConvexCone.comap

def Pointed (S : ConvexCone ùïú E) : Prop :=
  (0 : E) ‚àà S
#align convex_cone.pointed ConvexCone.Pointed

def Blunt (S : ConvexCone ùïú E) : Prop :=
  (0 : E) ‚àâ S
#align convex_cone.blunt ConvexCone.Blunt

def Flat : Prop :=
  ‚àÉ x ‚àà S, x ‚â† (0 : E) ‚àß -x ‚àà S
#align convex_cone.flat ConvexCone.Flat

def Salient : Prop :=
  ‚àÄ x ‚àà S, x ‚â† (0 : E) ‚Üí -x ‚àâ S
#align convex_cone.salient ConvexCone.Salient

def toPreorder (h‚ÇÅ : S.Pointed) : Preorder E where
  le x y := y - x ‚àà S
  le_refl x := by change x - x ‚àà S; rw [sub_self x]; exact h‚ÇÅ
  le_trans x y z xy zy := by simpa using add_mem S zy xy
#align convex_cone.to_preorder ConvexCone.toPreorder

def toPartialOrder (h‚ÇÅ : S.Pointed) (h‚ÇÇ : S.Salient) : PartialOrder E :=
  { toPreorder S h‚ÇÅ with
    le_antisymm := by
      intro a b ab ba
      by_contra h
      have h' : b - a ‚â† 0 := fun h'' => h (eq_of_sub_eq_zero h'').symm
      have H := h‚ÇÇ (b - a) ab h'
      rw [neg_sub b a] at H
      exact H ba }
#align convex_cone.to_partial_order ConvexCone.toPartialOrder

def toOrderedAddCommGroup (h‚ÇÅ : S.Pointed) (h‚ÇÇ : S.Salient) : OrderedAddCommGroup E :=
  { toPartialOrder S h‚ÇÅ h‚ÇÇ, show AddCommGroup E by infer_instance with
    add_le_add_left := by
      intro a b hab c
      change c + b - (c + a) ‚àà S
      rw [add_sub_add_left_eq_sub]
      exact hab }
#align convex_cone.to_ordered_add_comm_group ConvexCone.toOrderedAddCommGroup

def toConvexCone (S : Submodule ùïú E) : ConvexCone ùïú E where
  carrier := S
  smul_mem' c _ _ hx := S.smul_mem c hx
  add_mem' _ hx _ hy := S.add_mem hx hy
#align submodule.to_convex_cone Submodule.toConvexCone

def positive : ConvexCone ùïú E where
  carrier := Set.Ici 0
  smul_mem' _ hc _ (hx : _ ‚â§ _) := smul_nonneg hc.le hx
  add_mem' _ (hx : _ ‚â§ _) _ (hy : _ ‚â§ _) := add_nonneg hx hy
#align convex_cone.positive ConvexCone.positive

def strictlyPositive : ConvexCone ùïú E where
  carrier := Set.Ioi 0
  smul_mem' _ hc _ (hx : _ < _) := smul_pos hc hx
  add_mem' _ hx _ hy := add_pos hx hy
#align convex_cone.strictly_positive ConvexCone.strictlyPositive

def toCone (s : Set E) (hs : Convex ùïú s) : ConvexCone ùïú E := by
  apply ConvexCone.mk (‚ãÉ (c : ùïú) (_ : 0 < c), c ‚Ä¢ s) <;> simp only [mem_iUnion, mem_smul_set]
  ¬∑ rintro c c_pos _ ‚ü®c', c'_pos, x, hx, rfl‚ü©
    exact ‚ü®c * c', mul_pos c_pos c'_pos, x, hx, (smul_smul _ _ _).symm‚ü©
  ¬∑ rintro _ ‚ü®cx, cx_pos, x, hx, rfl‚ü© _ ‚ü®cy, cy_pos, y, hy, rfl‚ü©
    have : 0 < cx + cy := add_pos cx_pos cy_pos
    refine' ‚ü®_, this, _, convex_iff_div.1 hs hx hy cx_pos.le cy_pos.le this, _‚ü©
    simp only [smul_add, smul_smul, mul_div_assoc', mul_div_cancel_left‚ÇÄ _ this.ne']
#align convex.to_cone Convex.toCone

structure ConvexCone [AddCommMonoid E] [SMul ùïú E] where
  carrier : Set E
  smul_mem' : ‚àÄ ‚¶Éc : ùïú‚¶Ñ, 0 < c ‚Üí ‚àÄ ‚¶Éx : E‚¶Ñ, x ‚àà carrier ‚Üí c ‚Ä¢ x ‚àà carrier
  add_mem' : ‚àÄ ‚¶Éx‚¶Ñ (_ : x ‚àà carrier) ‚¶Éy‚¶Ñ (_ : y ‚àà carrier), x + y ‚àà carrier
#align convex_cone ConvexCone
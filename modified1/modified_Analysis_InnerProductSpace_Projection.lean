def orthogonalProjectionFn (v : E) :=
  (HasOrthogonalProjection.exists_orthogonal (K := K) v).choose
#align orthogonal_projection_fn orthogonalProjectionFn

def orthogonalProjection : E ‚ÜíL[ùïú] K :=
  LinearMap.mkContinuous
    { toFun := fun v => ‚ü®orthogonalProjectionFn K v, orthogonalProjectionFn_mem v‚ü©
      map_add' := fun x y => by
        have hm : orthogonalProjectionFn K x + orthogonalProjectionFn K y ‚àà K :=
          Submodule.add_mem K (orthogonalProjectionFn_mem x) (orthogonalProjectionFn_mem y)
        have ho :
          ‚àÄ w ‚àà K, ‚ü™x + y - (orthogonalProjectionFn K x + orthogonalProjectionFn K y), w‚ü´ = 0 := by
          intro w hw
          rw [add_sub_add_comm, inner_add_left, orthogonalProjectionFn_inner_eq_zero _ w hw,
            orthogonalProjectionFn_inner_eq_zero _ w hw, add_zero]
        ext
        simp [eq_orthogonalProjectionFn_of_mem_of_inner_eq_zero hm ho]
      map_smul' := fun c x => by
        have hm : c ‚Ä¢ orthogonalProjectionFn K x ‚àà K :=
          Submodule.smul_mem K _ (orthogonalProjectionFn_mem x)
        have ho : ‚àÄ w ‚àà K, ‚ü™c ‚Ä¢ x - c ‚Ä¢ orthogonalProjectionFn K x, w‚ü´ = 0 := by
          intro w hw
          rw [‚Üê smul_sub, inner_smul_left, orthogonalProjectionFn_inner_eq_zero _ w hw,
            mul_zero]
        ext
        simp [eq_orthogonalProjectionFn_of_mem_of_inner_eq_zero hm ho] }
    1 fun x => by
    simp only [one_mul, LinearMap.coe_mk]
    refine' le_of_pow_le_pow_left two_ne_zero (norm_nonneg _) _
    change ‚ÄñorthogonalProjectionFn K x‚Äñ ^ 2 ‚â§ ‚Äñx‚Äñ ^ 2
    nlinarith [orthogonalProjectionFn_norm_sq K x]
#align orthogonal_projection orthogonalProjection

def reflectionLinearEquiv : E ‚âÉ‚Çó[ùïú] E :=
  LinearEquiv.ofInvolutive
    (2 ‚Ä¢ (K.subtype.comp (orthogonalProjection K).toLinearMap) - LinearMap.id) fun x => by
    simp [two_smul]
#align reflection_linear_equiv reflectionLinearEquiv‚Çì

def reflection : E ‚âÉ‚Çó·µ¢[ùïú] E :=
  { reflectionLinearEquiv K with
    norm_map' := by
      intro x
      dsimp only
      let w : K := orthogonalProjection K x
      let v := x - w
      have : ‚ü™v, w‚ü´ = 0 := orthogonalProjection_inner_eq_zero x w w.2
      convert norm_sub_eq_norm_add this using 2
      ¬∑ rw [LinearEquiv.coe_mk, reflectionLinearEquiv, LinearEquiv.toFun_eq_coe,
          LinearEquiv.coe_ofInvolutive, LinearMap.sub_apply, LinearMap.id_apply, two_smul,
          LinearMap.add_apply, LinearMap.comp_apply, Submodule.subtype_apply,
          ContinuousLinearMap.coe_coe]
        dsimp [v]
        abel
      ¬∑ simp only [v, add_sub_cancel, eq_self_iff_true] }
#align reflection reflection

def OrthogonalFamily.decomposition [DecidableEq Œπ] [Fintype Œπ] {V : Œπ ‚Üí Submodule ùïú E}
    [‚àÄ i, CompleteSpace (V i)] (hV : OrthogonalFamily ùïú (fun i => V i) fun i => (V i).subtype‚Çó·µ¢)
    (h : iSup V = ‚ä§) : DirectSum.Decomposition V
    where
  decompose' x := DFinsupp.equivFunOnFintype.symm fun i => orthogonalProjection (V i) x
  left_inv x := by
    dsimp only
    letI := fun i => Classical.decEq (V i)
    rw [DirectSum.coeAddMonoidHom, DirectSum.toAddMonoid, DFinsupp.liftAddHom_apply]
    -- This used to be `rw`, but we need `erw` after leanprover/lean4#2644

structure inherited from `PiLp 2 (fun _ : ‚Ñï ‚Ü¶ ‚Ñù)`. Let `K` be the subspace of sequences with the sum
of all elements equal to zero. Then `K·óÆ = ‚ä•`, `K·óÆ·óÆ = ‚ä§`.  -/
theorem Submodule.orthogonal_orthogonal_eq_closure [CompleteSpace E] :
    K·óÆ·óÆ = K.topologicalClosure := by
  refine' le_antisymm _ _
  ¬∑ convert Submodule.orthogonal_orthogonal_monotone K.le_topologicalClosure using 1
    rw [K.topologicalClosure.orthogonal_orthogonal]
  ¬∑ exact K.topologicalClosure_minimal K.le_orthogonal_orthogonal K·óÆ.isClosed_orthogonal
#align submodule.orthogonal_orthogonal_eq_closure Submodule.orthogonal_orthogonal_eq_closure
def LinearMap.mkContinuous (C : ‚Ñù) (h : ‚àÄ x, ‚Äñf x‚Äñ ‚â§ C * ‚Äñx‚Äñ) : E ‚ÜíSL[œÉ] F :=
  ‚ü®f, AddMonoidHomClass.continuous_of_bound f C h‚ü©
#align linear_map.mk_continuous LinearMap.mkContinuous

def LinearMap.mkContinuousOfExistsBound (h : ‚àÉ C, ‚àÄ x, ‚Äñf x‚Äñ ‚â§ C * ‚Äñx‚Äñ) : E ‚ÜíSL[œÉ] F :=
  ‚ü®f,
    let ‚ü®C, hC‚ü© := h
    AddMonoidHomClass.continuous_of_bound f C hC‚ü©
#align linear_map.mk_continuous_of_exists_bound LinearMap.mkContinuousOfExistsBound

def LinearEquiv.toContinuousLinearEquivOfBounds (e : E ‚âÉ‚Çõ‚Çó[œÉ] F) (C_to C_inv : ‚Ñù)
    (h_to : ‚àÄ x, ‚Äñe x‚Äñ ‚â§ C_to * ‚Äñx‚Äñ) (h_inv : ‚àÄ x : F, ‚Äñe.symm x‚Äñ ‚â§ C_inv * ‚Äñx‚Äñ) : E ‚âÉSL[œÉ] F where
  toLinearEquiv := e
  continuous_toFun := AddMonoidHomClass.continuous_of_bound e C_to h_to
  continuous_invFun := AddMonoidHomClass.continuous_of_bound e.symm C_inv h_inv
#align linear_equiv.to_continuous_linear_equiv_of_bounds LinearEquiv.toContinuousLinearEquivOfBounds

def LinearMap.toContinuousLinearMap‚ÇÅ (f : ùïú ‚Üí‚Çó[ùïú] E) : ùïú ‚ÜíL[ùïú] E :=
  f.mkContinuous ‚Äñf 1‚Äñ fun x => by
    conv_lhs => rw [‚Üê mul_one x]
    rw [‚Üê smul_eq_mul, f.map_smul, mul_comm]; exact norm_smul_le _ _
#align linear_map.to_continuous_linear_map‚ÇÅ LinearMap.toContinuousLinearMap‚ÇÅ

def ContinuousLinearMap.ofHomothety (f : E ‚Üí‚Çõ‚Çó[œÉ] F) (a : ‚Ñù) (hf : ‚àÄ x, ‚Äñf x‚Äñ = a * ‚Äñx‚Äñ) :
    E ‚ÜíSL[œÉ] F :=
  f.mkContinuous a fun x => le_of_eq (hf x)
#align continuous_linear_map.of_homothety ContinuousLinearMap.ofHomothety

def ContinuousLinearEquiv.ofHomothety (f : E ‚âÉ‚Çõ‚Çó[œÉ] F) (a : ‚Ñù) (ha : 0 < a)
    (hf : ‚àÄ x, ‚Äñf x‚Äñ = a * ‚Äñx‚Äñ) : E ‚âÉSL[œÉ] F :=
  LinearEquiv.toContinuousLinearEquivOfBounds f a a‚Åª¬π (fun x => (hf x).le) fun x =>
    (ContinuousLinearEquiv.homothety_inverse a ha f hf x).le
#align continuous_linear_equiv.of_homothety ContinuousLinearEquiv.ofHomothety
def weightedSMul {_ : MeasurableSpace Œ±} (Œº : Measure Œ±) (s : Set Œ±) : F ‚ÜíL[‚Ñù] F :=
  (Œº s).toReal ‚Ä¢ ContinuousLinearMap.id ‚Ñù F
#align measure_theory.weighted_smul MeasureTheory.weightedSMul

def posPart (f : Œ± ‚Üí‚Çõ E) : Œ± ‚Üí‚Çõ E :=
  f.map fun b => max b 0
#align measure_theory.simple_func.pos_part MeasureTheory.SimpleFunc.posPart

def negPart [Neg E] (f : Œ± ‚Üí‚Çõ E) : Œ± ‚Üí‚Çõ E :=
  posPart (-f)
#align measure_theory.simple_func.neg_part MeasureTheory.SimpleFunc.negPart

def integral {_ : MeasurableSpace Œ±} (Œº : Measure Œ±) (f : Œ± ‚Üí‚Çõ F) : F :=
  f.setToSimpleFunc (weightedSMul Œº)
#align measure_theory.simple_func.integral MeasureTheory.SimpleFunc.integral

def {_ : MeasurableSpace Œ±} (Œº : Measure Œ±) (f : Œ± ‚Üí‚Çõ F) :
    f.integral Œº = f.setToSimpleFunc (weightedSMul Œº) := rfl
#align measure_theory.simple_func.integral_def MeasureTheory.SimpleFunc.integral_def

def posPart (f : Œ± ‚Üí‚ÇÅ‚Çõ[Œº] ‚Ñù) : Œ± ‚Üí‚ÇÅ‚Çõ[Œº] ‚Ñù :=
  ‚ü®Lp.posPart (f : Œ± ‚Üí‚ÇÅ[Œº] ‚Ñù), by
    rcases f with ‚ü®f, s, hsf‚ü©
    use s.posPart
    simp only [Subtype.coe_mk, Lp.coe_posPart, ‚Üê hsf, AEEqFun.posPart_mk,
      SimpleFunc.coe_map, mk_eq_mk]
    -- Porting note: added
    simp [SimpleFunc.posPart, Function.comp, EventuallyEq.rfl] ‚ü©
#align measure_theory.L1.simple_func.pos_part MeasureTheory.L1.SimpleFunc.posPart

def negPart (f : Œ± ‚Üí‚ÇÅ‚Çõ[Œº] ‚Ñù) : Œ± ‚Üí‚ÇÅ‚Çõ[Œº] ‚Ñù :=
  posPart (-f)
#align measure_theory.L1.simple_func.neg_part MeasureTheory.L1.SimpleFunc.negPart

def integral (f : Œ± ‚Üí‚ÇÅ‚Çõ[Œº] E) : E :=
  (toSimpleFunc f).integral Œº
#align measure_theory.L1.simple_func.integral MeasureTheory.L1.SimpleFunc.integral

def integralCLM' : (Œ± ‚Üí‚ÇÅ‚Çõ[Œº] E) ‚ÜíL[ùïú] E :=
  LinearMap.mkContinuous ‚ü®‚ü®integral, integral_add‚ü©, integral_smul‚ü© 1 fun f =>
    le_trans (norm_integral_le_norm _) <| by rw [one_mul]
#align measure_theory.L1.simple_func.integral_clm' MeasureTheory.L1.SimpleFunc.integralCLM'

def integralCLM : (Œ± ‚Üí‚ÇÅ‚Çõ[Œº] E) ‚ÜíL[‚Ñù] E :=
  integralCLM' Œ± E ‚Ñù Œº
#align measure_theory.L1.simple_func.integral_clm MeasureTheory.L1.SimpleFunc.integralCLM

def integralCLM' : (Œ± ‚Üí‚ÇÅ[Œº] E) ‚ÜíL[ùïú] E :=
  (integralCLM' Œ± E ùïú Œº).extend (coeToLp Œ± E ùïú) (simpleFunc.denseRange one_ne_top)
    simpleFunc.uniformInducing
#align measure_theory.L1.integral_clm' MeasureTheory.L1.integralCLM'

def integralCLM : (Œ± ‚Üí‚ÇÅ[Œº] E) ‚ÜíL[‚Ñù] E :=
  integralCLM' ‚Ñù
#align measure_theory.L1.integral_clm MeasureTheory.L1.integralCLM

def integral (f : Œ± ‚Üí‚ÇÅ[Œº] E) : E :=
  integralCLM (E := E) f
#align measure_theory.L1.integral MeasureTheory.L1.integral

def integral {_ : MeasurableSpace Œ±} (Œº : Measure Œ±) (f : Œ± ‚Üí G) : G :=
  if _ : CompleteSpace G then
    if hf : Integrable f Œº then L1.integral (hf.toL1 f) else 0
  else 0
#align measure_theory.integral MeasureTheory.integral

def {f : Œ± ‚Üí G} (h : ¬¨Integrable f Œº) : ‚à´ a, f a ‚àÇŒº = 0 := by
  by_cases hG : CompleteSpace G
  ¬∑ simp [integral, hG, h]
  ¬∑ simp [integral, hG]
#align measure_theory.integral_undef MeasureTheory.integral_undef

def h

theorem integral_non_aestronglyMeasurable {f : Œ± ‚Üí G} (h : ¬¨AEStronglyMeasurable f Œº) :
    ‚à´ a, f a ‚àÇŒº = 0 :=
  integral_undef <| not_and_of_not_left _ h
#align measure_theory.integral_non_ae_strongly_measurable MeasureTheory.integral_non_aestronglyMeasurable

def hf, norm_zero]; exact toReal_nonneg
  ¬∑ simp [integral, hG]
#align measure_theory.norm_integral_le_lintegral_norm MeasureTheory.norm_integral_le_lintegral_norm

def hfi]
    simp_rw [Integrable, hfm, hasFiniteIntegral_iff_norm, lt_top_iff_ne_top, Ne, true_and_iff,
      Classical.not_not] at hfi
    have : ‚à´‚Åª a : Œ±, ENNReal.ofReal (f a) ‚àÇŒº = ‚à´‚Åª a, ENNReal.ofReal ‚Äñf a‚Äñ ‚àÇŒº := by
      refine' lintegral_congr_ae (hf.mono fun a h => _)
      dsimp only
      rw [Real.norm_eq_abs, abs_of_nonneg h]
    rw [this, hfi]; rfl
#align measure_theory.integral_eq_lintegral_of_nonneg_ae MeasureTheory.integral_eq_lintegral_of_nonneg_ae

def hf]; exact b.2
#align measure_theory.integral_coe_le_of_lintegral_coe_le MeasureTheory.integral_coe_le_of_lintegral_coe_le

def hfi, integral_undef]
    exact fun hfœÜ => hfi ((integrable_map_measure hfm.aestronglyMeasurable hœÜ.aemeasurable).2 hfœÜ)
  borelize G
  have : SeparableSpace (range f ‚à™ {0} : Set G) := hfm.separableSpace_range_union_singleton
  refine' tendsto_nhds_unique
    (tendsto_integral_approxOn_of_measurable_of_range_subset hfm.measurable hfi _ Subset.rfl) _
  convert tendsto_integral_approxOn_of_measurable_of_range_subset (hfm.measurable.comp hœÜ)
    ((integrable_map_measure hfm.aestronglyMeasurable hœÜ.aemeasurable).1 hfi) (range f ‚à™ {0})
    (by simp [insert_subset_insert, Set.range_comp_subset_range]) using 1
  ext1 i
  simp only [SimpleFunc.approxOn_comp, SimpleFunc.integral_eq, Measure.map_apply, hœÜ,
    SimpleFunc.measurableSet_preimage, ‚Üê preimage_comp, SimpleFunc.coe_comp]
  refine' (Finset.sum_subset (SimpleFunc.range_comp_subset_range _ hœÜ) fun y _ hy => _).symm
  rw [SimpleFunc.mem_range, ‚Üê Set.preimage_singleton_eq_empty, SimpleFunc.coe_comp] at hy
  rw [hy]
  simp
#align measure_theory.integral_map_of_strongly_measurable MeasureTheory.integral_map_of_stronglyMeasurable

def SimpleFunc.toLargerSpace (hm : m ‚â§ m0) (f : @SimpleFunc Œ≤ m Œ≥) : SimpleFunc Œ≤ Œ≥ :=
  ‚ü®@SimpleFunc.toFun Œ≤ m Œ≥ f, fun x => hm _ (@SimpleFunc.measurableSet_fiber Œ≤ Œ≥ m f x),
    @SimpleFunc.finite_range Œ≤ Œ≥ m f‚ü©
#align measure_theory.simple_func.to_larger_space MeasureTheory.SimpleFunc.toLargerSpace

def hf_int, integral_undef hf_int_m]
  haveI : SeparableSpace (range f ‚à™ {0} : Set G) := hf.separableSpace_range_union_singleton
  let f_seq := @SimpleFunc.approxOn G Œ≤ _ _ _ m _ hf.measurable (range f ‚à™ {0}) 0 (by simp) _
  have hf_seq_meas : ‚àÄ n, StronglyMeasurable[m] (f_seq n) := fun n =>
    @SimpleFunc.stronglyMeasurable Œ≤ G m _ (f_seq n)
  have hf_seq_int : ‚àÄ n, Integrable (f_seq n) Œº :=
    SimpleFunc.integrable_approxOn_range (hf.mono hm).measurable hf_int
  have hf_seq_int_m : ‚àÄ n, Integrable (f_seq n) (Œº.trim hm) := fun n =>
    (hf_seq_int n).trim hm (hf_seq_meas n)
  have hf_seq_eq : ‚àÄ n, ‚à´ x, f_seq n x ‚àÇŒº = ‚à´ x, f_seq n x ‚àÇŒº.trim hm := fun n =>
    integral_trim_simpleFunc hm (f_seq n) (hf_seq_int n)
  have h_lim_1 : atTop.Tendsto (fun n => ‚à´ x, f_seq n x ‚àÇŒº) (ùìù (‚à´ x, f x ‚àÇŒº)) := by
    refine' tendsto_integral_of_L1 f hf_int (eventually_of_forall hf_seq_int) _
    exact SimpleFunc.tendsto_approxOn_range_L1_nnnorm (hf.mono hm).measurable hf_int
  have h_lim_2 : atTop.Tendsto (fun n => ‚à´ x, f_seq n x ‚àÇŒº) (ùìù (‚à´ x, f x ‚àÇŒº.trim hm)) := by
    simp_rw [hf_seq_eq]
    refine' @tendsto_integral_of_L1 Œ≤ G _ _ m (Œº.trim hm) _ f (hf_int.trim hm hf) _ _
      (eventually_of_forall hf_seq_int_m) _
    exact @SimpleFunc.tendsto_approxOn_range_L1_nnnorm Œ≤ G m _ _ _ f _ _ hf.measurable
      (hf_int.trim hm hf)
  exact tendsto_nhds_unique h_lim_1 h_lim_2
#align measure_theory.integral_trim MeasureTheory.integral_trim

def evalIntegral : PositivityExt where eval {u Œ±} zŒ± pŒ± e := do
  match u, Œ±, e with
  | 0, ~q(‚Ñù), ~q(@MeasureTheory.integral $i ‚Ñù _ $inst2 _ _ $f) =>
    let i : Q($i) ‚Üê mkFreshExprMVarQ q($i) .syntheticOpaque
    have body : Q(‚Ñù) := .betaRev f #[i]
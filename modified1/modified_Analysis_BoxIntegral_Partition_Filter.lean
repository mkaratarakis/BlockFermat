def equivProd : IntegrationParams ‚âÉ Bool √ó Bool·µí·µà √ó Bool·µí·µà where
  toFun l := ‚ü®l.1, OrderDual.toDual l.2, OrderDual.toDual l.3‚ü©
  invFun l := ‚ü®l.1, OrderDual.ofDual l.2.1, OrderDual.ofDual l.2.2‚ü©
  left_inv _ := rfl
  right_inv _ := rfl
#align box_integral.integration_params.equiv_prod BoxIntegral.IntegrationParams.equivProd

def isoProd : IntegrationParams ‚âÉo Bool √ó Bool·µí·µà √ó Bool·µí·µà :=
  ‚ü®equivProd, Iff.rfl‚ü©
#align box_integral.integration_params.iso_prod BoxIntegral.IntegrationParams.isoProd

def Riemann : IntegrationParams where
  bRiemann := true
  bHenstock := true
  bDistortion := false
set_option linter.uppercaseLean3 false in
#align box_integral.integration_params.Riemann BoxIntegral.IntegrationParams.Riemann

def Henstock : IntegrationParams :=
  ‚ü®false, true, false‚ü©
set_option linter.uppercaseLean3 false in
#align box_integral.integration_params.Henstock BoxIntegral.IntegrationParams.Henstock

def McShane : IntegrationParams :=
  ‚ü®false, false, false‚ü©
set_option linter.uppercaseLean3 false in
#align box_integral.integration_params.McShane BoxIntegral.IntegrationParams.McShane

def GP : IntegrationParams := ‚ä•
set_option linter.uppercaseLean3 false in
#align box_integral.integration_params.GP BoxIntegral.IntegrationParams.GP

def RCond {Œπ : Type*} (l : IntegrationParams) (r : (Œπ ‚Üí ‚Ñù) ‚Üí Ioi (0 : ‚Ñù)) : Prop :=
  l.bRiemann ‚Üí ‚àÄ x, r x = r 0
#align box_integral.integration_params.r_cond BoxIntegral.IntegrationParams.RCond

def toFilterDistortion (l : IntegrationParams) (I : Box Œπ) (c : ‚Ñù‚â•0) :
    Filter (TaggedPrepartition I) :=
  ‚®Ö (r : (Œπ ‚Üí ‚Ñù) ‚Üí Ioi (0 : ‚Ñù)) (_ : l.RCond r), ùìü { œÄ | l.MemBaseSet I c r œÄ }
#align box_integral.integration_params.to_filter_distortion BoxIntegral.IntegrationParams.toFilterDistortion

def toFilter (l : IntegrationParams) (I : Box Œπ) : Filter (TaggedPrepartition I) :=
  ‚®Ü c : ‚Ñù‚â•0, l.toFilterDistortion I c
#align box_integral.integration_params.to_filter BoxIntegral.IntegrationParams.toFilter

def toFilterDistortioniUnion (l : IntegrationParams) (I : Box Œπ) (c : ‚Ñù‚â•0) (œÄ‚ÇÄ : Prepartition I) :=
  l.toFilterDistortion I c ‚äì ùìü { œÄ | œÄ.iUnion = œÄ‚ÇÄ.iUnion }
#align box_integral.integration_params.to_filter_distortion_Union BoxIntegral.IntegrationParams.toFilterDistortioniUnion

def toFilteriUnion (l : IntegrationParams) (I : Box Œπ) (œÄ‚ÇÄ : Prepartition I) :=
  ‚®Ü c : ‚Ñù‚â•0, l.toFilterDistortioniUnion I c œÄ‚ÇÄ
#align box_integral.integration_params.to_filter_Union BoxIntegral.IntegrationParams.toFilteriUnion

structure `BoxIntegral.IntegrationParams`. This structure will be used as an
argument in the definition of `BoxIntegral.integral` in order to use the same definition for a few
well-known definitions of integrals based on partitions of a rectangular box into subboxes (Riemann
integral, Henstock-Kurzweil integral, and McShane integral).

This structure holds three boolean values (see below), and encodes eight different sets of
parameters; only four of these values are used somewhere in `mathlib4`. Three of them correspond to
the integration theories listed above, and one is a generalization of the one-dimensional
Henstock-Kurzweil integral such that the divergence theorem works without additional integrability
assumptions.

Finally, for each set of parameters `l : BoxIntegral.IntegrationParams` and a rectangular box
`I : BoxIntegral.Box Œπ`, we define several `Filter`s that will be used either in the definition of
the corresponding integral, or in the proofs of its properties. We equip
`BoxIntegral.IntegrationParams` with a `BoundedOrder` structure such that larger
`IntegrationParams` produce larger filters.

## Main definitions

structure `BoxIntegral.IntegrationParams` has 3 boolean fields with the following meaning:

* `bRiemann`: the value `true` means that the filter corresponds to a Riemann-style integral, i.e.
  in the definition of integrability we require a constant upper estimate `r` on the size of boxes
  of a tagged partition; the value `false` means that the estimate may depend on the position of the
  tag.

* `bHenstock`: the value `true` means that we require that each tag belongs to its own closed box;
  the value `false` means that we only require that tags belong to the ambient box.

* `bDistortion`: the value `true` means that `r` can depend on the maximal ratio of sides of the
  same box of a partition. Presence of this case make quite a few proofs harder but we can prove the
  divergence theorem only for the filter `BoxIntegral.IntegrationParams.GP = ‚ä• =
  {bRiemann := false, bHenstock := true, bDistortion := true}`.

### Well-known sets of parameters

structure BoxIntegral.IntegrationParams.MemBaseSet (l : BoxIntegral.IntegrationParams)
  (I : BoxIntegral.Box Œπ) (c : ‚Ñù‚â•0) (r : (Œπ ‚Üí ‚Ñù) ‚Üí Ioi (0 : ‚Ñù))
  (œÄ : BoxIntegral.TaggedPrepartition I) : Prop where
```

This predicate says that

* if `l.bHenstock`, then `œÄ` is a Henstock prepartition, i.e. each tag belongs to the corresponding
  closed box;
* `œÄ` is subordinate to `r`;
* if `l.bDistortion`, then the distortion of each box in `œÄ` is less than or equal to `c`;
* if `l.bDistortion`, then there exists a prepartition `œÄ'` with distortion `‚â§ c` that covers
  exactly `I \ œÄ.iUnion`.

The last condition is always true for `c > 1`, see TODO section for more details.

Then we define a predicate `BoxIntegral.IntegrationParams.RCond` on functions
`r : (Œπ ‚Üí ‚Ñù) ‚Üí {x : ‚Ñù | 0 < x}`. If `l.bRiemann`, then this predicate requires `r` to be a constant
function, otherwise it imposes no restrictions on `r`. We introduce this definition to prove a few
dot-notation lemmas: e.g., `BoxIntegral.IntegrationParams.RCond.min` says that the pointwise
minimum of two functions that satisfy this condition satisfies this condition as well.

Then we define four filters on `BoxIntegral.TaggedPrepartition I`.

* `BoxIntegral.IntegrationParams.toFilterDistortion`: an auxiliary filter that takes parameters
  `(l : BoxIntegral.IntegrationParams) (I : BoxIntegral.Box Œπ) (c : ‚Ñù‚â•0)` and returns the
  filter generated by all sets `{œÄ | MemBaseSet l I c r œÄ}`, where `r` is a function satisfying
  the predicate `BoxIntegral.IntegrationParams.RCond l`;

* `BoxIntegral.IntegrationParams.toFilter l I`: the supremum of `l.toFilterDistortion I c`
  over all `c : ‚Ñù‚â•0`;

* `BoxIntegral.IntegrationParams.toFilterDistortioniUnion l I c œÄ‚ÇÄ`, where `œÄ‚ÇÄ` is a
  prepartition of `I`: the infimum of `l.toFilterDistortion I c` and the principal filter
  generated by `{œÄ | œÄ.iUnion = œÄ‚ÇÄ.iUnion}`;

* `BoxIntegral.IntegrationParams.toFilteriUnion l I œÄ‚ÇÄ`: the supremum of
  `l.toFilterDistortioniUnion l I c œÄ‚ÇÄ` over all `c : ‚Ñù‚â•0`. This is the filter (in the case
  `œÄ‚ÇÄ = ‚ä§` is the one-box partition of `I`) used in the definition of the integral of a function
  over a box.

## Implementation details

structure holding 3 boolean values used to define a filter to be
used in the definition of a box-integrable function.

* `bRiemann`: the value `true` means that the filter corresponds to a Riemann-style integral, i.e.
  in the definition of integrability we require a constant upper estimate `r` on the size of boxes
  of a tagged partition; the value `false` means that the estimate may depend on the position of the
  tag.

* `bHenstock`: the value `true` means that we require that each tag belongs to its own closed box;
  the value `false` means that we only require that tags belong to the ambient box.

* `bDistortion`: the value `true` means that `r` can depend on the maximal ratio of sides of the
  same box of a partition. Presence of this case makes quite a few proofs harder but we can prove
  the divergence theorem only for the filter `BoxIntegral.IntegrationParams.GP = ‚ä• =
  {bRiemann := false, bHenstock := true, bDistortion := true}`.
-/
@[ext]
structure IntegrationParams : Type where
  (bRiemann bHenstock bDistortion : Bool)
#align box_integral.integration_params BoxIntegral.IntegrationParams

structure MemBaseSet (l : IntegrationParams) (I : Box Œπ) (c : ‚Ñù‚â•0) (r : (Œπ ‚Üí ‚Ñù) ‚Üí Ioi (0 : ‚Ñù))
    (œÄ : TaggedPrepartition I) : Prop where
  protected isSubordinate : œÄ.IsSubordinate r
  protected isHenstock : l.bHenstock ‚Üí œÄ.IsHenstock
  protected distortion_le : l.bDistortion ‚Üí œÄ.distortion ‚â§ c
  protected exists_compl : l.bDistortion ‚Üí ‚àÉ œÄ' : Prepartition I,
    œÄ'.iUnion = ‚ÜëI \ œÄ.iUnion ‚àß œÄ'.distortion ‚â§ c
#align box_integral.integration_params.mem_base_set BoxIntegral.IntegrationParams.MemBaseSet
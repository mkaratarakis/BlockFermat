def toCompl‚Çó·µ¢ : E ‚Üí‚Çó·µ¢[ùïú] Completion E :=
  { toCompl with
    toFun := (‚Üë)
    map_smul' := coe_smul
    norm_map' := norm_coe }
#align uniform_space.completion.to_compl‚Çó·µ¢ UniformSpace.Completion.toCompl‚Çó·µ¢

def toComplL : E ‚ÜíL[ùïú] Completion E :=
  toCompl‚Çó·µ¢.toContinuousLinearMap
set_option linter.uppercaseLean3 false in
#align uniform_space.completion.to_complL UniformSpace.Completion.toComplL

structure on the completion of a normed space

If `E` is a normed space over `ùïú`, then so is `UniformSpace.Completion E`. In this file we provide
necessary instances and define `UniformSpace.Completion.toCompl‚Çó·µ¢` - coercion
`E ‚Üí UniformSpace.Completion E` as a bundled linear isometry.

We also show that if `A` is a normed algebra over `ùïú`, then so is `UniformSpace.Completion A`.

TODO: Generalise the results here from the concrete `completion` to any `AbstractCompletion`.
-/


noncomputable section

namespace UniformSpace

namespace Completion

variable (ùïú E : Type*) [NormedField ùïú] [NormedAddCommGroup E] [NormedSpace ùïú E]

instance (priority := 100) NormedSpace.to_uniformContinuousConstSMul :
    UniformContinuousConstSMul ùïú E :=
  ‚ü®fun c => (lipschitzWith_smul c).uniformContinuous‚ü©
#align uniform_space.completion.normed_space.to_has_uniform_continuous_const_smul UniformSpace.Completion.NormedSpace.to_uniformContinuousConstSMul
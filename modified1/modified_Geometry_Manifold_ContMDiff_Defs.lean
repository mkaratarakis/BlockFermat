def ContDiffWithinAtProp (n : ‚Ñï‚àû) (f : H ‚Üí H') (s : Set H) (x : H) : Prop :=
  ContDiffWithinAt ùïú n (I' ‚àò f ‚àò I.symm) (I.symm ‚Åª¬π' s ‚à© range I) (I x)
#align cont_diff_within_at_prop ContDiffWithinAtProp

def ContMDiffWithinAt (n : ‚Ñï‚àû) (f : M ‚Üí M') (s : Set M) (x : M) :=
  LiftPropWithinAt (ContDiffWithinAtProp I I' n) f s x
#align cont_mdiff_within_at ContMDiffWithinAt

def SmoothWithinAt (f : M ‚Üí M') (s : Set M) (x : M) :=
  ContMDiffWithinAt I I' ‚ä§ f s x
#align smooth_within_at SmoothWithinAt

def ContMDiffAt (n : ‚Ñï‚àû) (f : M ‚Üí M') (x : M) :=
  ContMDiffWithinAt I I' n f univ x
#align cont_mdiff_at ContMDiffAt

def SmoothAt (f : M ‚Üí M') (x : M) :=
  ContMDiffAt I I' ‚ä§ f x
#align smooth_at SmoothAt

def ContMDiffOn (n : ‚Ñï‚àû) (f : M ‚Üí M') (s : Set M) :=
  ‚àÄ x ‚àà s, ContMDiffWithinAt I I' n f s x
#align cont_mdiff_on ContMDiffOn

def SmoothOn (f : M ‚Üí M') (s : Set M) :=
  ContMDiffOn I I' ‚ä§ f s
#align smooth_on SmoothOn

def ContMDiff (n : ‚Ñï‚àû) (f : M ‚Üí M') :=
  ‚àÄ x, ContMDiffAt I I' n f x
#align cont_mdiff ContMDiff

def Smooth (f : M ‚Üí M') :=
  ContMDiff I I' ‚ä§ f
#align smooth Smooth
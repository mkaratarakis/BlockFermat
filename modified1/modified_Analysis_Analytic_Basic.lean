def sum (p : FormalMultilinearSeries ùïú E F) (x : E) : F :=
  ‚àë' n : ‚Ñï, p n fun _ => x
#align formal_multilinear_series.sum FormalMultilinearSeries.sum

def partialSum (p : FormalMultilinearSeries ùïú E F) (n : ‚Ñï) (x : E) : F :=
  ‚àë k in Finset.range n, p k fun _ : Fin k => x
#align formal_multilinear_series.partial_sum FormalMultilinearSeries.partialSum

def radius (p : FormalMultilinearSeries ùïú E F) : ‚Ñù‚â•0‚àû :=
  ‚®Ü (r : ‚Ñù‚â•0) (C : ‚Ñù) (_ : ‚àÄ n, ‚Äñp n‚Äñ * (r : ‚Ñù) ^ n ‚â§ C), (r : ‚Ñù‚â•0‚àû)
#align formal_multilinear_series.radius FormalMultilinearSeries.radius

def HasFPowerSeriesAt (f : E ‚Üí F) (p : FormalMultilinearSeries ùïú E F) (x : E) :=
  ‚àÉ r, HasFPowerSeriesOnBall f p x r
#align has_fpower_series_at HasFPowerSeriesAt

def AnalyticAt (f : E ‚Üí F) (x : E) :=
  ‚àÉ p : FormalMultilinearSeries ùïú E F, HasFPowerSeriesAt f p x
#align analytic_at AnalyticAt

def AnalyticOn (f : E ‚Üí F) (s : Set E) :=
  ‚àÄ x, x ‚àà s ‚Üí AnalyticAt ùïú f x
#align analytic_on AnalyticOn

def changeOriginSeriesTerm (k l : ‚Ñï) (s : Finset (Fin (k + l))) (hs : s.card = l) :
    E[√ól]‚ÜíL[ùïú] E[√ók]‚ÜíL[ùïú] F := by
  let a := ContinuousMultilinearMap.curryFinFinset ùïú E F hs
    (by erw [Finset.card_compl, Fintype.card_fin, hs, add_tsub_cancel_right])
  exact a (p (k + l))
#align formal_multilinear_series.change_origin_series_term FormalMultilinearSeries.changeOriginSeriesTerm

def changeOriginSeries (k : ‚Ñï) : FormalMultilinearSeries ùïú E (E[√ók]‚ÜíL[ùïú] F) := fun l =>
  ‚àë s : { s : Finset (Fin (k + l)) // Finset.card s = l }, p.changeOriginSeriesTerm k l s s.2
#align formal_multilinear_series.change_origin_series FormalMultilinearSeries.changeOriginSeries

def changeOrigin (x : E) : FormalMultilinearSeries ùïú E F :=
  fun k => (p.changeOriginSeries k).sum x
#align formal_multilinear_series.change_origin FormalMultilinearSeries.changeOrigin

def changeOriginIndexEquiv :
    (Œ£ k l : ‚Ñï, { s : Finset (Fin (k + l)) // s.card = l }) ‚âÉ Œ£ n : ‚Ñï, Finset (Fin n) where
  toFun s := ‚ü®s.1 + s.2.1, s.2.2‚ü©
  invFun s :=
    ‚ü®s.1 - s.2.card, s.2.card,
      ‚ü®s.2.map
        (Fin.castIso <| (tsub_add_cancel_of_le <| card_finset_fin_le s.2).symm).toEquiv.toEmbedding,
        Finset.card_map _‚ü©‚ü©
  left_inv := by
    rintro ‚ü®k, l, ‚ü®s : Finset (Fin <| k + l), hs : s.card = l‚ü©‚ü©
    dsimp only [Subtype.coe_mk]
    -- Lean can't automatically generalize `k' = k + l - s.card`, `l' = s.card`, so we explicitly
    -- formulate the generalized goal
    suffices ‚àÄ k' l', k' = k ‚Üí l' = l ‚Üí ‚àÄ (hkl : k + l = k' + l') (hs'),
        (‚ü®k', l', ‚ü®Finset.map (Fin.castIso hkl).toEquiv.toEmbedding s, hs'‚ü©‚ü© :
          Œ£k l : ‚Ñï, { s : Finset (Fin (k + l)) // s.card = l }) = ‚ü®k, l, ‚ü®s, hs‚ü©‚ü© by
      apply this <;> simp only [hs, add_tsub_cancel_right]
    rintro _ _ rfl rfl hkl hs'
    simp only [Equiv.refl_toEmbedding, Fin.castIso_refl, Finset.map_refl, eq_self_iff_true,
      OrderIso.refl_toEquiv, and_self_iff, heq_iff_eq]
  right_inv := by
    rintro ‚ü®n, s‚ü©
    simp [tsub_add_cancel_of_le (card_finset_fin_le s), Fin.castIso_to_equiv]
#align formal_multilinear_series.change_origin_index_equiv FormalMultilinearSeries.changeOriginIndexEquiv

def derivSeries : FormalMultilinearSeries ùïú E (E ‚ÜíL[ùïú] F) :=
  (continuousMultilinearCurryFin1 ùïú E F : (E[√ó1]‚ÜíL[ùïú] F) ‚ÜíL[ùïú] E ‚ÜíL[ùïú] F)
    |>.compFormalMultilinearSeries (p.changeOriginSeries 1)

end

-- From this point on, assume that the space is complete, to make sure that series that converge
-- in norm also converge in `F`.
variable [CompleteSpace F] (p : FormalMultilinearSeries ùïú E F) {x y : E} {r R : ‚Ñù‚â•0}

theorem hasFPowerSeriesOnBall_changeOrigin (k : ‚Ñï) (hr : 0 < p.radius) :
    HasFPowerSeriesOnBall (fun x => p.changeOrigin x k) (p.changeOriginSeries k) 0 p.radius :=
  have := p.le_changeOriginSeries_radius k
  ((p.changeOriginSeries k).hasFPowerSeriesOnBall (hr.trans_le this)).mono hr this
#align formal_multilinear_series.has_fpower_series_on_ball_change_origin FormalMultilinearSeries.hasFPowerSeriesOnBall_changeOrigin

structure HasFPowerSeriesOnBall (f : E ‚Üí F) (p : FormalMultilinearSeries ùïú E F) (x : E) (r : ‚Ñù‚â•0‚àû) :
    Prop where
  r_le : r ‚â§ p.radius
  r_pos : 0 < r
  hasSum :
    ‚àÄ {y}, y ‚àà EMetric.ball (0 : E) r ‚Üí HasSum (fun n : ‚Ñï => p n fun _ : Fin n => y) (f (x + y))
#align has_fpower_series_on_ball HasFPowerSeriesOnBall
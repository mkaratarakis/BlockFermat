def equivRealProdCLM : ‚ÑÇ ‚âÉL[‚Ñù] ‚Ñù √ó ‚Ñù :=
  equivRealProdLm.toContinuousLinearEquivOfBounds 1 (‚àö2) equivRealProd_apply_le' fun p =>
    abs_le_sqrt_two_mul_max (equivRealProd.symm p)
#align complex.equiv_real_prod_clm Complex.equivRealProdCLM

def reCLM : ‚ÑÇ ‚ÜíL[‚Ñù] ‚Ñù :=
  reLm.mkContinuous 1 fun x => by simp [abs_re_le_abs]
#align complex.re_clm Complex.reCLM

def imCLM : ‚ÑÇ ‚ÜíL[‚Ñù] ‚Ñù :=
  imLm.mkContinuous 1 fun x => by simp [abs_im_le_abs]
#align complex.im_clm Complex.imCLM

def conjLIE : ‚ÑÇ ‚âÉ‚Çó·µ¢[‚Ñù] ‚ÑÇ :=
  ‚ü®conjAe.toLinearEquiv, abs_conj‚ü©
#align complex.conj_lie Complex.conjLIE

def conjCLE : ‚ÑÇ ‚âÉL[‚Ñù] ‚ÑÇ :=
  conjLIE
#align complex.conj_cle Complex.conjCLE

def ofRealLI : ‚Ñù ‚Üí‚Çó·µ¢[‚Ñù] ‚ÑÇ :=
  ‚ü®ofRealAm.toLinearMap, norm_real‚ü©
#align complex.of_real_li Complex.ofRealLI

def ofRealCLM : ‚Ñù ‚ÜíL[‚Ñù] ‚ÑÇ :=
  ofRealLI.toContinuousLinearMap
#align complex.of_real_clm Complex.ofRealCLM

def _root_.RCLike.complexRingEquiv {ùïú : Type*} [RCLike ùïú]
    (h : RCLike.im (RCLike.I : ùïú) = 1) : ùïú ‚âÉ+* ‚ÑÇ where
  toFun x := RCLike.re x + RCLike.im x * I
  invFun x := re x + im x * RCLike.I
  left_inv x := by simp
  right_inv x := by simp [h]
  map_add' x y := by simp only [map_add, ofReal_add]; ring
  map_mul' x y := by
    simp only [RCLike.mul_re, ofReal_sub, ofReal_mul, RCLike.mul_im, ofReal_add]
    ring_nf
    rw [I_sq]
    ring

/-- The natural `‚Ñù`-linear isometry equivalence between `ùïú` satisfying `RCLike ùïú` and `‚ÑÇ` when
`RCLike.im RCLike.I = 1`. -/
@[simps]
def _root_.RCLike.complexLinearIsometryEquiv {ùïú : Type*} [RCLike ùïú]
    (h : RCLike.im (RCLike.I : ùïú) = 1) : ùïú ‚âÉ‚Çó·µ¢[‚Ñù] ‚ÑÇ where
  map_smul' _ _ := by simp [RCLike.smul_re, RCLike.smul_im, ofReal_mul]; ring
  norm_map' _ := by
    rw [‚Üê sq_eq_sq (by positivity) (by positivity), ‚Üê normSq_eq_norm_sq, ‚Üê RCLike.normSq_eq_def',
      RCLike.normSq_apply]
    simp [normSq_add]
  __ := RCLike.complexRingEquiv h

section ComplexOrder

open ComplexOrder

theorem eq_coe_norm_of_nonneg {z : ‚ÑÇ} (hz : 0 ‚â§ z) : z = ‚Üë‚Äñz‚Äñ := by
  lift z to ‚Ñù using hz.2.symm
  rw [norm_eq_abs, abs_ofReal, _root_.abs_of_nonneg (id hz.1 : 0 ‚â§ z)]
#align complex.eq_coe_norm_of_nonneg Complex.eq_coe_norm_of_nonneg

structure on `‚ÑÇ`.

This file gathers basic facts on complex numbers of an analytic nature.

## Main results

structure of `‚ÑÇ`. Notably, in the namespace `Complex`,
it defines functions:

* `reCLM`
* `imCLM`
* `ofRealCLM`
* `conjCLE`

They are bundled versions of the real part, the imaginary part, the embedding of `‚Ñù` in `‚ÑÇ`, and
the complex conjugate as continuous `‚Ñù`-linear maps. The last two are also bundled as linear
isometries in `ofRealLI` and `conjLIE`.

We also register the fact that `‚ÑÇ` is an `RCLike` field.
-/


assert_not_exists Absorbs

noncomputable section

namespace Complex
variable {z : ‚ÑÇ}

open ComplexConjugate Topology Filter

instance : Norm ‚ÑÇ :=
  ‚ü®abs‚ü©

@[simp]
theorem norm_eq_abs (z : ‚ÑÇ) : ‚Äñz‚Äñ = abs z :=
  rfl
#align complex.norm_eq_abs Complex.norm_eq_abs

structure from `Module.complexToReal` is a normed space. -/
instance (priority := 900) _root_.NormedSpace.complexToReal : NormedSpace ‚Ñù E :=
  NormedSpace.restrictScalars ‚Ñù ‚ÑÇ E
#align normed_space.complex_to_real NormedSpace.complexToReal

structure from `Algebra.complexToReal` is a normed algebra. -/
instance (priority := 900) _root_.NormedAlgebra.complexToReal {A : Type*} [SeminormedRing A]
    [NormedAlgebra ‚ÑÇ A] : NormedAlgebra ‚Ñù A :=
  NormedAlgebra.restrictScalars ‚Ñù ‚ÑÇ A

theorem dist_eq (z w : ‚ÑÇ) : dist z w = abs (z - w) :=
  rfl
#align complex.dist_eq Complex.dist_eq
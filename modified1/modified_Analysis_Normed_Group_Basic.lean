def NormedGroup.ofSeparation [SeminormedGroup E] (h : ‚àÄ x : E, ‚Äñx‚Äñ = 0 ‚Üí x = 1) :
    NormedGroup E where
  dist_eq := ‚ÄπSeminormedGroup E‚Ä∫.dist_eq
  toMetricSpace :=
    { eq_of_dist_eq_zero := fun hxy =>
        div_eq_one.1 <| h _ <| by exact (‚ÄπSeminormedGroup E‚Ä∫.dist_eq _ _).symm.trans hxy }
      -- Porting note: the `rwa` no longer worked, but it was easy enough to provide the term.
      -- however, notice that if you make `x` and `y` accessible, then the following does work:
      -- `have := ‚ÄπSeminormedGroup E‚Ä∫.dist_eq x y; rwa [‚Üê this]`, so I'm not sure why the `rwa`
      -- was broken.
#align normed_group.of_separation NormedGroup.ofSeparation

def NormedCommGroup.ofSeparation [SeminormedCommGroup E] (h : ‚àÄ x : E, ‚Äñx‚Äñ = 0 ‚Üí x = 1) :
    NormedCommGroup E :=
  { ‚ÄπSeminormedCommGroup E‚Ä∫, NormedGroup.ofSeparation h with }
#align normed_comm_group.of_separation NormedCommGroup.ofSeparation

def SeminormedGroup.ofMulDist [Norm E] [Group E] [PseudoMetricSpace E]
    (h‚ÇÅ : ‚àÄ x : E, ‚Äñx‚Äñ = dist x 1) (h‚ÇÇ : ‚àÄ x y z : E, dist x y ‚â§ dist (x * z) (y * z)) :
    SeminormedGroup E where
  dist_eq x y := by
    rw [h‚ÇÅ]; apply le_antisymm
    ¬∑ simpa only [div_eq_mul_inv, ‚Üê mul_right_inv y] using h‚ÇÇ _ _ _
    ¬∑ simpa only [div_mul_cancel, one_mul] using h‚ÇÇ (x / y) 1 y
#align seminormed_group.of_mul_dist SeminormedGroup.ofMulDist

def SeminormedGroup.ofMulDist' [Norm E] [Group E] [PseudoMetricSpace E]
    (h‚ÇÅ : ‚àÄ x : E, ‚Äñx‚Äñ = dist x 1) (h‚ÇÇ : ‚àÄ x y z : E, dist (x * z) (y * z) ‚â§ dist x y) :
    SeminormedGroup E where
  dist_eq x y := by
    rw [h‚ÇÅ]; apply le_antisymm
    ¬∑ simpa only [div_mul_cancel, one_mul] using h‚ÇÇ (x / y) 1 y
    ¬∑ simpa only [div_eq_mul_inv, ‚Üê mul_right_inv y] using h‚ÇÇ _ _ _
#align seminormed_group.of_mul_dist' SeminormedGroup.ofMulDist'

def SeminormedCommGroup.ofMulDist [Norm E] [CommGroup E] [PseudoMetricSpace E]
    (h‚ÇÅ : ‚àÄ x : E, ‚Äñx‚Äñ = dist x 1) (h‚ÇÇ : ‚àÄ x y z : E, dist x y ‚â§ dist (x * z) (y * z)) :
    SeminormedCommGroup E :=
  { SeminormedGroup.ofMulDist h‚ÇÅ h‚ÇÇ with
    mul_comm := mul_comm }
#align seminormed_comm_group.of_mul_dist SeminormedCommGroup.ofMulDist

def SeminormedCommGroup.ofMulDist' [Norm E] [CommGroup E] [PseudoMetricSpace E]
    (h‚ÇÅ : ‚àÄ x : E, ‚Äñx‚Äñ = dist x 1) (h‚ÇÇ : ‚àÄ x y z : E, dist (x * z) (y * z) ‚â§ dist x y) :
    SeminormedCommGroup E :=
  { SeminormedGroup.ofMulDist' h‚ÇÅ h‚ÇÇ with
    mul_comm := mul_comm }
#align seminormed_comm_group.of_mul_dist' SeminormedCommGroup.ofMulDist'

def NormedGroup.ofMulDist [Norm E] [Group E] [MetricSpace E] (h‚ÇÅ : ‚àÄ x : E, ‚Äñx‚Äñ = dist x 1)
    (h‚ÇÇ : ‚àÄ x y z : E, dist x y ‚â§ dist (x * z) (y * z)) : NormedGroup E :=
  { SeminormedGroup.ofMulDist h‚ÇÅ h‚ÇÇ with
    eq_of_dist_eq_zero := eq_of_dist_eq_zero }
#align normed_group.of_mul_dist NormedGroup.ofMulDist

def NormedGroup.ofMulDist' [Norm E] [Group E] [MetricSpace E] (h‚ÇÅ : ‚àÄ x : E, ‚Äñx‚Äñ = dist x 1)
    (h‚ÇÇ : ‚àÄ x y z : E, dist (x * z) (y * z) ‚â§ dist x y) : NormedGroup E :=
  { SeminormedGroup.ofMulDist' h‚ÇÅ h‚ÇÇ with
    eq_of_dist_eq_zero := eq_of_dist_eq_zero }
#align normed_group.of_mul_dist' NormedGroup.ofMulDist'

def NormedCommGroup.ofMulDist [Norm E] [CommGroup E] [MetricSpace E]
    (h‚ÇÅ : ‚àÄ x : E, ‚Äñx‚Äñ = dist x 1) (h‚ÇÇ : ‚àÄ x y z : E, dist x y ‚â§ dist (x * z) (y * z)) :
    NormedCommGroup E :=
  { NormedGroup.ofMulDist h‚ÇÅ h‚ÇÇ with
    mul_comm := mul_comm }
#align normed_comm_group.of_mul_dist NormedCommGroup.ofMulDist

def NormedCommGroup.ofMulDist' [Norm E] [CommGroup E] [MetricSpace E]
    (h‚ÇÅ : ‚àÄ x : E, ‚Äñx‚Äñ = dist x 1) (h‚ÇÇ : ‚àÄ x y z : E, dist (x * z) (y * z) ‚â§ dist x y) :
    NormedCommGroup E :=
  { NormedGroup.ofMulDist' h‚ÇÅ h‚ÇÇ with
    mul_comm := mul_comm }
#align normed_comm_group.of_mul_dist' NormedCommGroup.ofMulDist'

def GroupSeminorm.toSeminormedGroup [Group E] (f : GroupSeminorm E) : SeminormedGroup E where
  dist x y := f (x / y)
  norm := f
  dist_eq x y := rfl
  dist_self x := by simp only [div_self', map_one_eq_zero]
  dist_triangle := le_map_div_add_map_div f
  dist_comm := map_div_rev f
  edist_dist x y := by exact ENNReal.coe_nnreal_eq _
  -- Porting note: how did `mathlib3` solve this automatically?
#align group_seminorm.to_seminormed_group GroupSeminorm.toSeminormedGroup

def GroupSeminorm.toSeminormedCommGroup [CommGroup E] (f : GroupSeminorm E) :
    SeminormedCommGroup E :=
  { f.toSeminormedGroup with
    mul_comm := mul_comm }
#align group_seminorm.to_seminormed_comm_group GroupSeminorm.toSeminormedCommGroup

def GroupNorm.toNormedGroup [Group E] (f : GroupNorm E) : NormedGroup E :=
  { f.toGroupSeminorm.toSeminormedGroup with
    eq_of_dist_eq_zero := fun h => div_eq_one.1 <| eq_one_of_map_eq_zero f h }
#align group_norm.to_normed_group GroupNorm.toNormedGroup

def GroupNorm.toNormedCommGroup [CommGroup E] (f : GroupNorm E) : NormedCommGroup E :=
  { f.toNormedGroup with
    mul_comm := mul_comm }
#align group_norm.to_normed_comm_group GroupNorm.toNormedCommGroup

def evalMulNorm : PositivityExt where eval {u Œ±} _zŒ± _pŒ± e := do
  match u, Œ±, e with
  | 0, ~q(‚Ñù), ~q(@Norm.norm $Œ≤ $instDist $a) =>
    let _inst ‚Üê synthInstanceQ q(SeminormedGroup $Œ≤)
    assertInstancesCommute
    pure (.nonnegative q(norm_nonneg' $a))
  | _, _, _ => throwError "not ‚Äñ ¬∑ ‚Äñ"

/-- Extension for the `positivity` tactic: additive norms are nonnegative, via `norm_nonneg`. -/
@[positivity Norm.norm _]
def evalAddNorm : PositivityExt where eval {u Œ±} _zŒ± _pŒ± e := do
  match u, Œ±, e with
  | 0, ~q(‚Ñù), ~q(@Norm.norm $Œ≤ $instDist $a) =>
    let _inst ‚Üê synthInstanceQ q(SeminormedAddGroup $Œ≤)
    assertInstancesCommute
    pure (.nonnegative q(norm_nonneg $a))
  | _, _, _ => throwError "not ‚Äñ ¬∑ ‚Äñ"

end Mathlib.Meta.Positivity

@[to_additive (attr := simp) norm_zero]
theorem norm_one' : ‚Äñ(1 : E)‚Äñ = 0 := by rw [‚Üê dist_one_right, dist_self]
#align norm_one' norm_one'

def normGroupSeminorm : GroupSeminorm E :=
  ‚ü®norm, norm_one', norm_mul_le', norm_inv'‚ü©
#align norm_group_seminorm normGroupSeminorm

def SeminormedGroup.induced [Group E] [SeminormedGroup F] [MonoidHomClass ùìï E F] (f : ùìï) :
    SeminormedGroup E :=
  { PseudoMetricSpace.induced f toPseudoMetricSpace with
    -- Porting note: needed to add the instance explicitly, and `‚ÄπPseudoMetricSpace F‚Ä∫` failed
    norm := fun x => ‚Äñf x‚Äñ
    dist_eq := fun x y => by simp only [map_div, ‚Üê dist_eq_norm_div]; rfl }
#align seminormed_group.induced SeminormedGroup.induced

def SeminormedCommGroup.induced
    [CommGroup E] [SeminormedGroup F] [MonoidHomClass ùìï E F] (f : ùìï) :
    SeminormedCommGroup E :=
  { SeminormedGroup.induced E F f with
    mul_comm := mul_comm }
#align seminormed_comm_group.induced SeminormedCommGroup.induced

def NormedGroup.induced
    [Group E] [NormedGroup F] [MonoidHomClass ùìï E F] (f : ùìï) (h : Injective f) :
    NormedGroup E :=
  { SeminormedGroup.induced E F f, MetricSpace.induced f h _ with }
#align normed_group.induced NormedGroup.induced

def NormedCommGroup.induced [CommGroup E] [NormedGroup F] [MonoidHomClass ùìï E F] (f : ùìï)
    (h : Injective f) : NormedCommGroup E :=
  { SeminormedGroup.induced E F f, MetricSpace.induced f h _ with
    mul_comm := mul_comm }
#align normed_comm_group.induced NormedCommGroup.induced

def normGroupNorm : GroupNorm E :=
  { normGroupSeminorm _ with eq_one_of_map_eq_zero' := fun _ => norm_eq_zero''.1 }
#align norm_group_norm normGroupNorm

def (x : ULift E) : ‚Äñx‚Äñ = ‚Äñx.down‚Äñ :=
  rfl
#align ulift.norm_def ULift.norm_def

def (x : ULift E) : ‚Äñx‚Äñ‚Çä = ‚Äñx.down‚Äñ‚Çä :=
  rfl
#align ulift.nnnorm_def ULift.nnnorm_def

def (x : E √ó F) : ‚Äñx‚Äñ = max ‚Äñx.1‚Äñ ‚Äñx.2‚Äñ :=
  rfl
#align prod.norm_def Prod.norm_def

def (x : E √ó F) : ‚Äñx‚Äñ‚Çä = max ‚Äñx.1‚Äñ‚Çä ‚Äñx.2‚Äñ‚Çä :=
  rfl
#align prod.nnorm_def Prod.nnorm_def

def Pi.norm_def

@[to_additive Pi.nnnorm_def]
theorem Pi.nnnorm_def' : ‚Äñf‚Äñ‚Çä = Finset.univ.sup fun b => ‚Äñf b‚Äñ‚Çä :=
  Subtype.eta _ _
#align pi.nnnorm_def' Pi.nnnorm_def'

def Pi.nnnorm_def

/-- The seminorm of an element in a product space is `‚â§ r` if and only if the norm of each
component is. -/
@[to_additive pi_norm_le_iff_of_nonneg "The seminorm of an element in a product space is `‚â§ r` if
and only if the norm of each component is."]
theorem pi_norm_le_iff_of_nonneg' (hr : 0 ‚â§ r) : ‚Äñx‚Äñ ‚â§ r ‚Üî ‚àÄ i, ‚Äñx i‚Äñ ‚â§ r := by
  simp only [‚Üê dist_one_right, dist_pi_le_iff hr, Pi.one_apply]
#align pi_norm_le_iff_of_nonneg' pi_norm_le_iff_of_nonneg'

structure from the seminorm properties. Note that in most cases this instance
creates bad definitional equalities (e.g., it does not take into account a possibly existing
`UniformSpace` instance on `E`). -/
@[to_additive (attr := reducible)
  "Construct a seminormed group from a seminorm, i.e., registering the pseudodistance
and the pseudometric space structure from the seminorm properties. Note that in most cases this
instance creates bad definitional equalities (e.g., it does not take into account a possibly
existing `UniformSpace` instance on `E`)."]
def GroupSeminorm.toSeminormedGroup [Group E] (f : GroupSeminorm E) : SeminormedGroup E where
  dist x y := f (x / y)
  norm := f
  dist_eq x y := rfl
  dist_self x := by simp only [div_self', map_one_eq_zero]
  dist_triangle := le_map_div_add_map_div f
  dist_comm := map_div_rev f
  edist_dist x y := by exact ENNReal.coe_nnreal_eq _
  -- Porting note: how did `mathlib3` solve this automatically?
#align group_seminorm.to_seminormed_group GroupSeminorm.toSeminormedGroup

structure from the seminorm properties. Note that in most cases this instance
creates bad definitional equalities (e.g., it does not take into account a possibly existing
`UniformSpace` instance on `E`). -/
@[to_additive (attr := reducible)
  "Construct a seminormed group from a seminorm, i.e., registering the pseudodistance
and the pseudometric space structure from the seminorm properties. Note that in most cases this
instance creates bad definitional equalities (e.g., it does not take into account a possibly
existing `UniformSpace` instance on `E`)."]
def GroupSeminorm.toSeminormedCommGroup [CommGroup E] (f : GroupSeminorm E) :
    SeminormedCommGroup E :=
  { f.toSeminormedGroup with
    mul_comm := mul_comm }
#align group_seminorm.to_seminormed_comm_group GroupSeminorm.toSeminormedCommGroup

structure from the norm properties. Note that in most cases this instance creates bad definitional
equalities (e.g., it does not take into account a possibly existing `UniformSpace` instance on
`E`). -/
@[to_additive (attr := reducible)
  "Construct a normed group from a norm, i.e., registering the distance and the metric
space structure from the norm properties. Note that in most cases this instance creates bad
definitional equalities (e.g., it does not take into account a possibly existing `UniformSpace`
instance on `E`)."]
def GroupNorm.toNormedGroup [Group E] (f : GroupNorm E) : NormedGroup E :=
  { f.toGroupSeminorm.toSeminormedGroup with
    eq_of_dist_eq_zero := fun h => div_eq_one.1 <| eq_one_of_map_eq_zero f h }
#align group_norm.to_normed_group GroupNorm.toNormedGroup

structure from the norm properties. Note that in most cases this instance creates bad definitional
equalities (e.g., it does not take into account a possibly existing `UniformSpace` instance on
`E`). -/
@[to_additive (attr := reducible)
  "Construct a normed group from a norm, i.e., registering the distance and the metric
space structure from the norm properties. Note that in most cases this instance creates bad
definitional equalities (e.g., it does not take into account a possibly existing `UniformSpace`
instance on `E`)."]
def GroupNorm.toNormedCommGroup [CommGroup E] (f : GroupNorm E) : NormedCommGroup E :=
  { f.toNormedGroup with
    mul_comm := mul_comm }
#align group_norm.to_normed_comm_group GroupNorm.toNormedCommGroup

structure on the domain. -/
@[to_additive (attr := reducible) "A group homomorphism from an `AddGroup` to a
`SeminormedAddGroup` induces a `SeminormedAddGroup` structure on the domain."]
def SeminormedGroup.induced [Group E] [SeminormedGroup F] [MonoidHomClass ùìï E F] (f : ùìï) :
    SeminormedGroup E :=
  { PseudoMetricSpace.induced f toPseudoMetricSpace with
    -- Porting note: needed to add the instance explicitly, and `‚ÄπPseudoMetricSpace F‚Ä∫` failed
    norm := fun x => ‚Äñf x‚Äñ
    dist_eq := fun x y => by simp only [map_div, ‚Üê dist_eq_norm_div]; rfl }
#align seminormed_group.induced SeminormedGroup.induced

structure on the domain. -/
@[to_additive (attr := reducible) "A group homomorphism from an `AddCommGroup` to a
`SeminormedAddGroup` induces a `SeminormedAddCommGroup` structure on the domain."]
def SeminormedCommGroup.induced
    [CommGroup E] [SeminormedGroup F] [MonoidHomClass ùìï E F] (f : ùìï) :
    SeminormedCommGroup E :=
  { SeminormedGroup.induced E F f with
    mul_comm := mul_comm }
#align seminormed_comm_group.induced SeminormedCommGroup.induced

structure on the domain. -/
@[to_additive (attr := reducible) "An injective group homomorphism from an `AddGroup` to a
`NormedAddGroup` induces a `NormedAddGroup` structure on the domain."]
def NormedGroup.induced
    [Group E] [NormedGroup F] [MonoidHomClass ùìï E F] (f : ùìï) (h : Injective f) :
    NormedGroup E :=
  { SeminormedGroup.induced E F f, MetricSpace.induced f h _ with }
#align normed_group.induced NormedGroup.induced

structure on the domain. -/
@[to_additive (attr := reducible) "An injective group homomorphism from a `CommGroup` to a
`NormedCommGroup` induces a `NormedCommGroup` structure on the domain."]
def NormedCommGroup.induced [CommGroup E] [NormedGroup F] [MonoidHomClass ùìï E F] (f : ùìï)
    (h : Injective f) : NormedCommGroup E :=
  { SeminormedGroup.induced E F f, MetricSpace.induced f h _ with
    mul_comm := mul_comm }
#align normed_comm_group.induced NormedCommGroup.induced
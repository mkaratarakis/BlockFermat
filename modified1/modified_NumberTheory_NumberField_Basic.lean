def ringOfIntegers :=
  integralClosure ‚Ñ§ K
#align number_field.ring_of_integers NumberField.ringOfIntegers

def equiv (R : Type*) [CommRing R] [Algebra R K]
    [IsIntegralClosure R ‚Ñ§ K] : ùìû K ‚âÉ+* R :=
  (IsIntegralClosure.equiv ‚Ñ§ R K _).symm.toRingEquiv
#align number_field.ring_of_integers.equiv NumberField.RingOfIntegers.equiv

def basis : Basis (Free.ChooseBasisIndex ‚Ñ§ (ùìû K)) ‚Ñ§ (ùìû K) :=
  Free.chooseBasis ‚Ñ§ (ùìû K)
#align number_field.ring_of_integers.basis NumberField.RingOfIntegers.basis

def integralBasis : Basis (Free.ChooseBasisIndex ‚Ñ§ (ùìû K)) ‚Ñö K :=
  Basis.localizationLocalization ‚Ñö (nonZeroDivisors ‚Ñ§) K (RingOfIntegers.basis K)
#align number_field.integral_basis NumberField.integralBasis

def ringOfIntegersEquiv : ringOfIntegers ‚Ñö ‚âÉ+* ‚Ñ§ :=
  RingOfIntegers.equiv ‚Ñ§
#align rat.ring_of_integers_equiv Rat.ringOfIntegersEquiv

structure is not a field. -/
theorem Int.not_isField : ¬¨IsField ‚Ñ§ := fun h =>
  Int.not_even_one <|
    (h.mul_inv_cancel two_ne_zero).imp fun a => by rw [‚Üê two_mul]; exact Eq.symm
#align int.not_is_field Int.not_isField

structure of `‚Ñö` over itself can arise in multiple ways:
  -- all fields are vector spaces over themselves (used in `Rat.finiteDimensional`)
  -- all char 0 fields have a canonical embedding of `‚Ñö` (used in `NumberField`).
  -- Show that these coincide:
    convert (inferInstance : FiniteDimensional ‚Ñö ‚Ñö)
#align rat.number_field Rat.numberField
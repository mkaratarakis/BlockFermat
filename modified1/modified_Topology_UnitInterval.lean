def symm : I ‚Üí I := fun t => ‚ü®1 - t, mem_iff_one_sub_mem.mp t.prop‚ü©
#align unit_interval.symm unitInterval.symm

def symmHomeomorph : I ‚âÉ‚Çú I where
  toFun := symm
  invFun := symm
  left_inv := symm_symm
  right_inv := symm_symm

theorem strictAnti_symm : StrictAnti œÉ := fun _ _ h ‚Ü¶ sub_lt_sub_left (Œ± := ‚Ñù) h _

-- 2024-02-27
@[deprecated] alias involutive_symm := symm_involutive

-- 2024-02-27
@[deprecated] alias bijective_symm := symm_bijective

theorem half_le_symm_iff (t : I) : 1 / 2 ‚â§ (œÉ t : ‚Ñù) ‚Üî (t : ‚Ñù) ‚â§ 1 / 2 := by
  rw [coe_symm_eq, le_sub_iff_add_le, add_comm, ‚Üê le_sub_iff_add_le, sub_half]

instance : ConnectedSpace I :=
  Subtype.connectedSpace ‚ü®nonempty_Icc.mpr zero_le_one, isPreconnected_Icc‚ü©

/-- Verify there is an instance for `CompactSpace I`. -/
example : CompactSpace I := by infer_instance

theorem nonneg (x : I) : 0 ‚â§ (x : ‚Ñù) :=
  x.2.1
#align unit_interval.nonneg unitInterval.nonneg

def addNSMul (Œ¥ : Œ±) (n : ‚Ñï) : Icc a b := projIcc a b h (a + n ‚Ä¢ Œ¥)

lemma addNSMul_zero : addNSMul h Œ¥ 0 = a := by
  rw [addNSMul, zero_smul, add_zero, projIcc_left]

lemma addNSMul_eq_right [Archimedean Œ±] (hŒ¥ : 0 < Œ¥) :
    ‚àÉ m, ‚àÄ n ‚â• m, addNSMul h Œ¥ n = b := by
  obtain ‚ü®m, hm‚ü© := Archimedean.arch (b - a) hŒ¥
  refine ‚ü®m, fun n hn ‚Ü¶ ?_‚ü©
  rw [addNSMul, coe_projIcc, add_comm, min_eq_left_iff.mpr, max_eq_right h]
  exact sub_le_iff_le_add.mp (hm.trans <| nsmul_le_nsmul_left hŒ¥.le hn)

lemma monotone_addNSMul (hŒ¥ : 0 ‚â§ Œ¥) : Monotone (addNSMul h Œ¥) :=
  fun _ _ hnm ‚Ü¶ monotone_projIcc h <| (add_le_add_iff_left _).mpr (nsmul_le_nsmul_left hŒ¥ hnm)

lemma abs_sub_addNSMul_le (hŒ¥ : 0 ‚â§ Œ¥) {t : Icc a b} (n : ‚Ñï)
    (ht : t ‚àà Icc (addNSMul h Œ¥ n) (addNSMul h Œ¥ (n+1))) :
    (|t - addNSMul h Œ¥ n| : Œ±) ‚â§ Œ¥ :=
  (abs_eq_self.2 <| sub_nonneg.2 ht.1).trans_le <| (sub_le_sub_right (by exact ht.2) _).trans <|
    (le_abs_self _).trans <| (abs_projIcc_sub_projIcc h).trans <| by
      rw [add_sub_add_comm, sub_self, zero_add, succ_nsmul', add_sub_cancel_right]
      exact (abs_eq_self.mpr hŒ¥).le

end Set.Icc

open scoped unitInterval

/-- Any open cover `c` of a closed interval `[a, b]` in ‚Ñù can be refined to
  a finite partition into subintervals. -/
lemma exists_monotone_Icc_subset_open_cover_Icc {Œπ} {a b : ‚Ñù} (h : a ‚â§ b) {c : Œπ ‚Üí Set (Icc a b)}
    (hc‚ÇÅ : ‚àÄ i, IsOpen (c i)) (hc‚ÇÇ : univ ‚äÜ ‚ãÉ i, c i) : ‚àÉ t : ‚Ñï ‚Üí Icc a b, t 0 = a ‚àß
      Monotone t ‚àß (‚àÉ m, ‚àÄ n ‚â• m, t n = b) ‚àß ‚àÄ n, ‚àÉ i, Icc (t n) (t (n + 1)) ‚äÜ c i := by
  obtain ‚ü®Œ¥, Œ¥_pos, ball_subset‚ü© := lebesgue_number_lemma_of_metric isCompact_univ hc‚ÇÅ hc‚ÇÇ
  have hŒ¥ := half_pos Œ¥_pos
  refine ‚ü®addNSMul h (Œ¥/2), addNSMul_zero h,
    monotone_addNSMul h hŒ¥.le, addNSMul_eq_right h hŒ¥, fun n ‚Ü¶ ?_‚ü©
  obtain ‚ü®i, hsub‚ü© := ball_subset (addNSMul h (Œ¥/2) n) trivial
  exact ‚ü®i, fun t ht ‚Ü¶ hsub ((abs_sub_addNSMul_le h hŒ¥.le n ht).trans_lt <| half_lt_self Œ¥_pos)‚ü©

/-- Any open cover of the unit interval can be refined to a finite partition into subintervals. -/
lemma exists_monotone_Icc_subset_open_cover_unitInterval {Œπ} {c : Œπ ‚Üí Set I}
    (hc‚ÇÅ : ‚àÄ i, IsOpen (c i)) (hc‚ÇÇ : univ ‚äÜ ‚ãÉ i, c i) : ‚àÉ t : ‚Ñï ‚Üí I, t 0 = 0 ‚àß
      Monotone t ‚àß (‚àÉ n, ‚àÄ m ‚â• n, t m = 1) ‚àß ‚àÄ n, ‚àÉ i, Icc (t n) (t (n + 1)) ‚äÜ c i := by
  simp_rw [‚Üê Subtype.coe_inj]
  exact exists_monotone_Icc_subset_open_cover_Icc zero_le_one hc‚ÇÅ hc‚ÇÇ

lemma exists_monotone_Icc_subset_open_cover_unitInterval_prod_self {Œπ} {c : Œπ ‚Üí Set (I √ó I)}
    (hc‚ÇÅ : ‚àÄ i, IsOpen (c i)) (hc‚ÇÇ : univ ‚äÜ ‚ãÉ i, c i) :
    ‚àÉ t : ‚Ñï ‚Üí I, t 0 = 0 ‚àß Monotone t ‚àß (‚àÉ n, ‚àÄ m ‚â• n, t m = 1) ‚àß
      ‚àÄ n m, ‚àÉ i, Icc (t n) (t (n + 1)) √óÀ¢ Icc (t m) (t (m + 1)) ‚äÜ c i := by
  obtain ‚ü®Œ¥, Œ¥_pos, ball_subset‚ü© := lebesgue_number_lemma_of_metric isCompact_univ hc‚ÇÅ hc‚ÇÇ
  have hŒ¥ := half_pos Œ¥_pos
  simp_rw [Subtype.ext_iff]
  have h : (0 : ‚Ñù) ‚â§ 1 := zero_le_one
  refine ‚ü®addNSMul h (Œ¥/2), addNSMul_zero h,
    monotone_addNSMul h hŒ¥.le, addNSMul_eq_right h hŒ¥, fun n m ‚Ü¶ ?_‚ü©
  obtain ‚ü®i, hsub‚ü© := ball_subset (addNSMul h (Œ¥/2) n, addNSMul h (Œ¥/2) m) trivial
  exact ‚ü®i, fun t ht ‚Ü¶ hsub (Metric.mem_ball.mpr <| (max_le (abs_sub_addNSMul_le h hŒ¥.le n ht.1) <|
    abs_sub_addNSMul_le h hŒ¥.le m ht.2).trans_lt <| half_lt_self Œ¥_pos)‚ü©

end partition

@[simp]
theorem projIcc_eq_zero {x : ‚Ñù} : projIcc (0 : ‚Ñù) 1 zero_le_one x = 0 ‚Üî x ‚â§ 0 :=
  projIcc_eq_left zero_lt_one
#align proj_Icc_eq_zero projIcc_eq_zero

def tactic
/-- A tactic that solves `0 ‚â§ ‚Üëx`, `0 ‚â§ 1 - ‚Üëx`, `‚Üëx ‚â§ 1`, and `1 - ‚Üëx ‚â§ 1` for `x : I`. -/
macro "unit_interval" : tactic =>
  `(tactic| (first
  | apply unitInterval.nonneg
  | apply unitInterval.one_minus_nonneg
  | apply unitInterval.le_one
  | apply unitInterval.one_minus_le_one))
#noalign tactic.interactive.unit_interval

def iccHomeoI (a b : ùïú) (h : a < b) : Set.Icc a b ‚âÉ‚Çú Set.Icc (0 : ùïú) (1 : ùïú) := by
  let e := Homeomorph.image (affineHomeomorph (b - a) a (sub_pos.mpr h).ne.symm) (Set.Icc 0 1)
  refine' (e.trans _).symm
  apply Homeomorph.setCongr
  rw [affineHomeomorph_image_I _ _ (sub_pos.2 h)]
  simp
set_option linter.uppercaseLean3 false in
#align Icc_homeo_I iccHomeoI
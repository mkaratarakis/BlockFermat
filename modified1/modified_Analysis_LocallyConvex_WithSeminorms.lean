def basisSets (p : SeminormFamily ùïú E Œπ) : Set (Set E) :=
  ‚ãÉ (s : Finset Œπ) (r) (_ : 0 < r), singleton (ball (s.sup p) (0 : E) r)
#align seminorm_family.basis_sets SeminormFamily.basisSets

def addGroupFilterBasis [Nonempty Œπ] : AddGroupFilterBasis E :=
  addGroupFilterBasisOfComm p.basisSets p.basisSets_nonempty p.basisSets_intersect p.basisSets_zero
    p.basisSets_add p.basisSets_neg
#align seminorm_family.add_group_filter_basis SeminormFamily.addGroupFilterBasis

def moduleFilterBasis : ModuleFilterBasis ùïú E where
  toAddGroupFilterBasis := p.addGroupFilterBasis
  smul' := p.basisSets_smul _
  smul_left' := p.basisSets_smul_left
  smul_right' := p.basisSets_smul_right
#align seminorm_family.module_filter_basis SeminormFamily.moduleFilterBasis

def IsBounded (p : Œπ ‚Üí Seminorm ùïú E) (q : Œπ' ‚Üí Seminorm ùïú‚ÇÇ F) (f : E ‚Üí‚Çõ‚Çó[œÉ‚ÇÅ‚ÇÇ] F) : Prop :=
  ‚àÄ i, ‚àÉ s : Finset Œπ, ‚àÉ C : ‚Ñù‚â•0, (q i).comp f ‚â§ C ‚Ä¢ s.sup p
#align seminorm.is_bounded Seminorm.IsBounded

def SeminormFamily.comp (q : SeminormFamily ùïú‚ÇÇ F Œπ) (f : E ‚Üí‚Çõ‚Çó[œÉ‚ÇÅ‚ÇÇ] F) : SeminormFamily ùïú E Œπ :=
  fun i => (q i).comp f
#align seminorm_family.comp SeminormFamily.comp

def SeminormFamily.sigma {Œ∫ : Œπ ‚Üí Type*} (p : (i : Œπ) ‚Üí SeminormFamily ùïú E (Œ∫ i)) :
    SeminormFamily ùïú E ((i : Œπ) √ó Œ∫ i) :=
  fun ‚ü®i, k‚ü© => p i k

theorem withSeminorms_iInf {Œ∫ : Œπ ‚Üí Type*} [Nonempty ((i : Œπ) √ó Œ∫ i)] [‚àÄ i, Nonempty (Œ∫ i)]
    {p : (i : Œπ) ‚Üí SeminormFamily ùïú E (Œ∫ i)} {t : Œπ ‚Üí TopologicalSpace E}
    [‚àÄ i, @TopologicalAddGroup E (t i) _] (hp : ‚àÄ i, WithSeminorms (topology := t i) (p i)) :
    WithSeminorms (topology := ‚®Ö i, t i) (SeminormFamily.sigma p) := by
  have : @TopologicalAddGroup E (‚®Ö i, t i) _ := topologicalAddGroup_iInf (fun i ‚Ü¶ inferInstance)
  simp_rw [@SeminormFamily.withSeminorms_iff_topologicalSpace_eq_iInf _ _ _ _ _ _ _ (_)] at hp ‚ä¢
  rw [iInf_sigma]
  exact iInf_congr hp

end TopologicalConstructions

section TopologicalProperties

variable [NontriviallyNormedField ùïú] [AddCommGroup E] [Module ùïú E] [Nonempty Œπ] [Countable Œπ]
variable {p : SeminormFamily ùïú E Œπ}
variable [TopologicalSpace E]

/-- If the topology of a space is induced by a countable family of seminorms, then the topology
is first countable. -/
theorem WithSeminorms.first_countable (hp : WithSeminorms p) :
    FirstCountableTopology E := by
  have := hp.topologicalAddGroup
  let _ : UniformSpace E := TopologicalAddGroup.toUniformSpace E
  have : UniformAddGroup E := comm_topologicalAddGroup_is_uniform
  have : (ùìù (0 : E)).IsCountablyGenerated := by
    rw [p.withSeminorms_iff_nhds_eq_iInf.mp hp]
    exact Filter.iInf.isCountablyGenerated _
  have : (uniformity E).IsCountablyGenerated := UniformAddGroup.uniformity_countably_generated
  exact UniformSpace.firstCountableTopology E
#align with_seminorms.first_countable WithSeminorms.first_countable

structure WithSeminorms (p : SeminormFamily ùïú E Œπ) [topology : TopologicalSpace E] : Prop where
  topology_eq_withSeminorms : topology = p.moduleFilterBasis.topology
#align with_seminorms WithSeminorms

structure induced by a family of seminorms is exactly the infimum of the ones
induced by each seminorm individually. We express this as a characterization of
`WithSeminorms p`. -/
theorem SeminormFamily.withSeminorms_iff_uniformSpace_eq_iInf [u : UniformSpace E]
    [UniformAddGroup E] (p : SeminormFamily ùïú E Œπ) :
    WithSeminorms p ‚Üî u = ‚®Ö i, (p i).toSeminormedAddCommGroup.toUniformSpace := by
  rw [p.withSeminorms_iff_nhds_eq_iInf,
    UniformAddGroup.ext_iff inferInstance (uniformAddGroup_iInf fun i => inferInstance),
    UniformSpace.toTopologicalSpace_iInf, nhds_iInf]
  congrm _ = ‚®Ö i, ?_
  exact @comap_norm_nhds_zero _ (p i).toAddGroupSeminorm.toSeminormedAddGroup
#align seminorm_family.with_seminorms_iff_uniform_space_eq_infi SeminormFamily.withSeminorms_iff_uniformSpace_eq_iInf
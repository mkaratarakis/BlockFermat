def Lp {Œ±} (E : Type*) {m : MeasurableSpace Œ±} [NormedAddCommGroup E] (p : ‚Ñù‚â•0‚àû)
    (Œº : Measure Œ± := by volume_tac) : AddSubgroup (Œ± ‚Üí‚Çò[Œº] E) where
  carrier := { f | snorm f p Œº < ‚àû }
  zero_mem' := by simp [snorm_congr_ae AEEqFun.coeFn_zero, snorm_zero]
  add_mem' {f g} hf hg := by
    simp [snorm_congr_ae (AEEqFun.coeFn_add f g),
      snorm_add_lt_top ‚ü®f.aestronglyMeasurable, hf‚ü© ‚ü®g.aestronglyMeasurable, hg‚ü©]
  neg_mem' {f} hf := by rwa [Set.mem_setOf_eq, snorm_congr_ae (AEEqFun.coeFn_neg f), snorm_neg]
#align measure_theory.Lp MeasureTheory.Lp

def toLp (f : Œ± ‚Üí E) (h_mem_‚Ñíp : Mem‚Ñíp f p Œº) : Lp E p Œº :=
  ‚ü®AEEqFun.mk f h_mem_‚Ñíp.1, h_mem_‚Ñíp.snorm_mk_lt_top‚ü©
#align measure_theory.mem_‚Ñíp.to_Lp MeasureTheory.Mem‚Ñíp.toLp

def (f : Lp E p Œº) : ‚Äñf‚Äñ = ENNReal.toReal (snorm f p Œº) :=
  rfl
#align measure_theory.Lp.norm_def MeasureTheory.Lp.norm_def

def (f : Lp E p Œº) : ‚Äñf‚Äñ‚Çä = ENNReal.toNNReal (snorm f p Œº) :=
  rfl
#align measure_theory.Lp.nnnorm_def MeasureTheory.Lp.nnnorm_def

def (f g : Lp E p Œº) : dist f g = (snorm (‚áëf - ‚áëg) p Œº).toReal := by
  simp_rw [dist, norm_def]
  refine congr_arg _ ?_
  apply snorm_congr_ae (coeFn_sub _ _)
#align measure_theory.Lp.dist_def MeasureTheory.Lp.dist_def

def (f g : Lp E p Œº) : edist f g = snorm (‚áëf - ‚áëg) p Œº :=
  rfl
#align measure_theory.Lp.edist_def MeasureTheory.Lp.edist_def

def ..

@[simp]
theorem edist_toLp_toLp (f g : Œ± ‚Üí E) (hf : Mem‚Ñíp f p Œº) (hg : Mem‚Ñíp g p Œº) :
    edist (hf.toLp f) (hg.toLp g) = snorm (f - g) p Œº := by
  rw [edist_def]
  exact snorm_congr_ae (hf.coeFn_toLp.sub hg.coeFn_toLp)
#align measure_theory.Lp.edist_to_Lp_to_Lp MeasureTheory.Lp.edist_toLp_toLp

def LpSubmodule : Submodule ùïú (Œ± ‚Üí‚Çò[Œº] E) :=
  { Lp E p Œº with smul_mem' := fun c f hf => by simpa using const_smul_mem_Lp c ‚ü®f, hf‚ü© }
#align measure_theory.Lp.Lp_submodule MeasureTheory.Lp.LpSubmodule

def indicatorConstLp (p : ‚Ñù‚â•0‚àû) (hs : MeasurableSet s) (hŒºs : Œº s ‚â† ‚àû) (c : E) : Lp E p Œº :=
  Mem‚Ñíp.toLp (s.indicator fun _ => c) (mem‚Ñíp_indicator_const p hs c (Or.inr hŒºs))
#align measure_theory.indicator_const_Lp MeasureTheory.indicatorConstLp

def Lp.const : E ‚Üí+ Lp E p Œº where
  toFun c := ‚ü®AEEqFun.const Œ± c, const_mem_Lp Œ± Œº c‚ü©
  map_zero' := rfl
  map_add' _ _ := rfl

lemma Lp.coeFn_const : Lp.const p Œº c =·µê[Œº] Function.const Œ± c :=
  AEEqFun.coeFn_const Œ± c

@[simp] lemma Lp.const_val : (Lp.const p Œº c).1 = AEEqFun.const Œ± c := rfl

@[simp]
lemma Mem‚Ñíp.toLp_const : Mem‚Ñíp.toLp _ (mem‚Ñíp_const c) = Lp.const p Œº c := rfl

@[simp]
lemma indicatorConstLp_univ :
    indicatorConstLp p .univ (measure_ne_top Œº _) c = Lp.const p Œº c := by
  rw [‚Üê Mem‚Ñíp.toLp_const, indicatorConstLp]
  simp only [Set.indicator_univ, Function.const]

theorem Lp.norm_const [NeZero Œº] (hp_zero : p ‚â† 0) :
    ‚ÄñLp.const p Œº c‚Äñ = ‚Äñc‚Äñ * (Œº Set.univ).toReal ^ (1 / p.toReal) := by
  have := NeZero.ne Œº
  rw [‚Üê Mem‚Ñíp.toLp_const, Lp.norm_toLp, snorm_const] <;> try assumption
  rw [ENNReal.toReal_mul, ENNReal.coe_toReal, ‚Üê ENNReal.toReal_rpow, coe_nnnorm]

theorem Lp.norm_const' (hp_zero : p ‚â† 0) (hp_top : p ‚â† ‚àû) :
    ‚ÄñLp.const p Œº c‚Äñ = ‚Äñc‚Äñ * (Œº Set.univ).toReal ^ (1 / p.toReal) := by
  rw [‚Üê Mem‚Ñíp.toLp_const, Lp.norm_toLp, snorm_const'] <;> try assumption
  rw [ENNReal.toReal_mul, ENNReal.coe_toReal, ‚Üê ENNReal.toReal_rpow, coe_nnnorm]

theorem Lp.norm_const_le : ‚ÄñLp.const p Œº c‚Äñ ‚â§ ‚Äñc‚Äñ * (Œº Set.univ).toReal ^ (1 / p.toReal) := by
  rw [‚Üê indicatorConstLp_univ]
  exact norm_indicatorConstLp_le

/-- `MeasureTheory.Lp.const` as a `LinearMap`. -/
@[simps] protected def Lp.const‚Çó (ùïú : Type*) [NormedRing ùïú] [Module ùïú E] [BoundedSMul ùïú E] :
    E ‚Üí‚Çó[ùïú] Lp E p Œº where
  toFun := Lp.const p Œº
  map_add' := map_add _
  map_smul' _ _ := rfl

@[simps! apply]
protected def Lp.constL (ùïú : Type*) [NormedField ùïú] [NormedSpace ùïú E] [Fact (1 ‚â§ p)] :
    E ‚ÜíL[ùïú] Lp E p Œº :=
  (Lp.const‚Çó p Œº ùïú).mkContinuous ((Œº Set.univ).toReal ^ (1 / p.toReal)) fun _ ‚Ü¶
    (Lp.norm_const_le _ _ _).trans_eq (mul_comm _ _)

theorem Lp.norm_constL_le (ùïú : Type*) [NontriviallyNormedField ùïú] [NormedSpace ùïú E]
    [Fact (1 ‚â§ p)] :
    ‚Äñ(Lp.constL p Œº ùïú : E ‚ÜíL[ùïú] Lp E p Œº)‚Äñ ‚â§ (Œº Set.univ).toReal ^ (1 / p.toReal) :=
  LinearMap.mkContinuous_norm_le _ (by positivity) _

end const

theorem Mem‚Ñíp.norm_rpow_div {f : Œ± ‚Üí E} (hf : Mem‚Ñíp f p Œº) (q : ‚Ñù‚â•0‚àû) :
    Mem‚Ñíp (fun x : Œ± => ‚Äñf x‚Äñ ^ q.toReal) (p / q) Œº := by
  refine' ‚ü®(hf.1.norm.aemeasurable.pow_const q.toReal).aestronglyMeasurable, _‚ü©
  by_cases q_top : q = ‚àû
  ¬∑ simp [q_top]
  by_cases q_zero : q = 0
  ¬∑ simp [q_zero]
    by_cases p_zero : p = 0
    ¬∑ simp [p_zero]
    rw [ENNReal.div_zero p_zero]
    exact (mem‚Ñíp_top_const (1 : ‚Ñù)).2
  rw [snorm_norm_rpow _ (ENNReal.toReal_pos q_zero q_top)]
  apply ENNReal.rpow_lt_top_of_nonneg ENNReal.toReal_nonneg
  rw [ENNReal.ofReal_toReal q_top, div_eq_mul_inv, mul_assoc, ENNReal.inv_mul_cancel q_zero q_top,
    mul_one]
  exact hf.2.ne
#align measure_theory.mem_‚Ñíp.norm_rpow_div MeasureTheory.Mem‚Ñíp.norm_rpow_div

def compMeasurePreserving (f : Œ± ‚Üí Œ≤) (hf : MeasurePreserving f Œº Œºb) :
    Lp E p Œºb ‚Üí+ Lp E p Œº where
  toFun g := ‚ü®g.1.compMeasurePreserving f hf, g.1.compMeasurePreserving_mem_Lp g.2 hf‚ü©
  map_zero' := rfl
  map_add' := by rintro ‚ü®‚ü®_‚ü©, _‚ü© ‚ü®‚ü®_‚ü©, _‚ü©; rfl

@[simp]
theorem compMeasurePreserving_val (g : Lp E p Œºb) (hf : MeasurePreserving f Œº Œºb) :
    (compMeasurePreserving f hf g).1 = g.1.compMeasurePreserving f hf :=
  rfl

theorem coeFn_compMeasurePreserving (g : Lp E p Œºb) (hf : MeasurePreserving f Œº Œºb) :
    compMeasurePreserving f hf g =·µê[Œº] g ‚àò f :=
  g.1.coeFn_compMeasurePreserving hf

@[simp]
theorem norm_compMeasurePreserving (g : Lp E p Œºb) (hf : MeasurePreserving f Œº Œºb) :
    ‚ÄñcompMeasurePreserving f hf g‚Äñ = ‚Äñg‚Äñ :=
  congr_arg ENNReal.toReal <| g.1.snorm_compMeasurePreserving hf

variable (ùïú : Type*) [NormedRing ùïú] [Module ùïú E] [BoundedSMul ùïú E]

/-- `MeasureTheory.Lp.compMeasurePreserving` as a linear map. -/
@[simps]
def compMeasurePreserving‚Çó (f : Œ± ‚Üí Œ≤) (hf : MeasurePreserving f Œº Œºb) :
    Lp E p Œºb ‚Üí‚Çó[ùïú] Lp E p Œº where
  __ := compMeasurePreserving f hf
  map_smul' c g := by rcases g with ‚ü®‚ü®_‚ü©, _‚ü©; rfl

/-- `MeasureTheory.Lp.compMeasurePreserving` as a linear isometry. -/
@[simps!]
def compMeasurePreserving‚Çó·µ¢ [Fact (1 ‚â§ p)] (f : Œ± ‚Üí Œ≤) (hf : MeasurePreserving f Œº Œºb) :
    Lp E p Œºb ‚Üí‚Çó·µ¢[ùïú] Lp E p Œº where
  toLinearMap := compMeasurePreserving‚Çó ùïú f hf
  norm_map' := (norm_compMeasurePreserving ¬∑ hf)

end Lp

end MeasureTheory

open MeasureTheory

/-!
### Composition on `L^p`

def compLp (hg : LipschitzWith c g) (g0 : g 0 = 0) (f : Lp E p Œº) : Lp F p Œº :=
  ‚ü®AEEqFun.comp g hg.continuous (f : Œ± ‚Üí‚Çò[Œº] E), by
    suffices ‚àÄ·µê x ‚àÇŒº, ‚ÄñAEEqFun.comp g hg.continuous (f : Œ± ‚Üí‚Çò[Œº] E) x‚Äñ ‚â§ c * ‚Äñf x‚Äñ from
      Lp.mem_Lp_of_ae_le_mul this
    filter_upwards [AEEqFun.coeFn_comp g hg.continuous (f : Œ± ‚Üí‚Çò[Œº] E)] with a ha
    simp only [ha]
    rw [‚Üê dist_zero_right, ‚Üê dist_zero_right, ‚Üê g0]
    exact hg.dist_le_mul (f a) 0‚ü©
#align lipschitz_with.comp_Lp LipschitzWith.compLp

def compLp (L : E ‚ÜíL[ùïú] F) (f : Lp E p Œº) : Lp F p Œº :=
  L.lipschitz.compLp (map_zero L) f
#align continuous_linear_map.comp_Lp ContinuousLinearMap.compLp

def compLp‚Çó (L : E ‚ÜíL[ùïú] F) : Lp E p Œº ‚Üí‚Çó[ùïú] Lp F p Œº where
  toFun f := L.compLp f
  map_add' f g := by
    ext1
    filter_upwards [Lp.coeFn_add f g, coeFn_compLp L (f + g), coeFn_compLp L f,
      coeFn_compLp L g, Lp.coeFn_add (L.compLp f) (L.compLp g)]
    intro a ha1 ha2 ha3 ha4 ha5
    simp only [ha1, ha2, ha3, ha4, ha5, map_add, Pi.add_apply]
  map_smul' c f := by
    dsimp
    ext1
    filter_upwards [Lp.coeFn_smul c f, coeFn_compLp L (c ‚Ä¢ f), Lp.coeFn_smul c (L.compLp f),
      coeFn_compLp L f] with _ ha1 ha2 ha3 ha4
    simp only [ha1, ha2, ha3, ha4, map_smul, Pi.smul_apply]
#align continuous_linear_map.comp_Lp‚Çó ContinuousLinearMap.compLp‚Çó

def compLpL [Fact (1 ‚â§ p)] (L : E ‚ÜíL[ùïú] F) : Lp E p Œº ‚ÜíL[ùïú] Lp F p Œº :=
  LinearMap.mkContinuous (L.compLp‚Çó p Œº) ‚ÄñL‚Äñ L.norm_compLp_le
#align continuous_linear_map.comp_LpL ContinuousLinearMap.compLpL

def posPart (f : Lp ‚Ñù p Œº) : Lp ‚Ñù p Œº :=
  lipschitzWith_pos_part.compLp (max_eq_right le_rfl) f
#align measure_theory.Lp.pos_part MeasureTheory.Lp.posPart

def negPart (f : Lp ‚Ñù p Œº) : Lp ‚Ñù p Œº :=
  posPart (-f)
#align measure_theory.Lp.neg_part MeasureTheory.Lp.negPart

def MeasureTheory.Lp.boundedContinuousFunction : AddSubgroup (Lp E p Œº) :=
  AddSubgroup.addSubgroupOf
    ((ContinuousMap.toAEEqFunAddHom Œº).comp (toContinuousMapAddHom Œ± E)).range (Lp E p Œº)
#align measure_theory.Lp.bounded_continuous_function MeasureTheory.Lp.boundedContinuousFunction

def toLpHom [Fact (1 ‚â§ p)] : NormedAddGroupHom (Œ± ‚Üí·µá E) (Lp E p Œº) :=
  { AddMonoidHom.codRestrict ((ContinuousMap.toAEEqFunAddHom Œº).comp (toContinuousMapAddHom Œ± E))
      (Lp E p Œº) mem_Lp with
    bound' := ‚ü®_, Lp_norm_le‚ü© }
#align bounded_continuous_function.to_Lp_hom BoundedContinuousFunction.toLpHom

def toLp [NormedField ùïú] [NormedSpace ùïú E] : (Œ± ‚Üí·µá E) ‚ÜíL[ùïú] Lp E p Œº :=
  LinearMap.mkContinuous
    (LinearMap.codRestrict (Lp.LpSubmodule E p Œº ùïú)
      ((ContinuousMap.toAEEqFunLinearMap Œº).comp (toContinuousMapLinearMap Œ± E ùïú)) mem_Lp)
    _ Lp_norm_le
#align bounded_continuous_function.to_Lp BoundedContinuousFunction.toLp

def toLp [NormedField ùïú] [NormedSpace ùïú E] : C(Œ±, E) ‚ÜíL[ùïú] Lp E p Œº :=
  (BoundedContinuousFunction.toLp p Œº ùïú).comp
    (linearIsometryBoundedOfCompact Œ± E ùïú).toLinearIsometry.toContinuousLinearMap
#align continuous_map.to_Lp ContinuousMap.toLp

def [NormedField ùïú] [NormedSpace ùïú E] (f : C(Œ±, E)) :
    toLp (E := E) p Œº ùïú f =
      BoundedContinuousFunction.toLp (E := E) p Œº ùïú (linearIsometryBoundedOfCompact Œ± E ùïú f) :=
  rfl
#align continuous_map.to_Lp_def ContinuousMap.toLp_def

structure from `BoundedContinuousFunction.toLp` along the isometry. -/
def toLp [NormedField ùïú] [NormedSpace ùïú E] : C(Œ±, E) ‚ÜíL[ùïú] Lp E p Œº :=
  (BoundedContinuousFunction.toLp p Œº ùïú).comp
    (linearIsometryBoundedOfCompact Œ± E ùïú).toLinearIsometry.toContinuousLinearMap
#align continuous_map.to_Lp ContinuousMap.toLp